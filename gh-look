#!/usr/bin/env bash
set -euo pipefail
# -e : immediately exit if any command has a non-zero exit status.
# -u : program to immediately exit on references for any variable you haven't previously defined
# -o pipefail : any command in a pipeline that fails the return code will be used as the return code of the whole pipeline

# <------------------- TODOs -------------------- >

# TODO: the statement [[...]] && ... || ... is a typical bash pitfall case, if the command after && fails the command after || gets executed as well (it should not); use a simple if ... else ... statement
# https://mywiki.wooledge.org/BashPitfalls#cmd1_.26.26_cmd2_.7C.7C_cmd3
# TODO: When making a emoji reaction let the user choose from a list of valid emojis, currently it only doees on start up
# TODO: If there is a merge event on a PR, don't display the "close" event as well https://pkg.go.dev/text/template
# TODO: sometimes when searching for a popular repo like "vscode, tsx,..." it does not give the result on the first try and you have to reload with "ctrl+r". INVESTIGATE, why this is!
# TODO: disable comments that are marked as spam, use "isMinimized" or "minimizedReason"
# TODO: find a better way to manage the help section for each command, currently too much duplication.
# TODO: run tests on the script
# TODO: make the listed elements in the workflow run section more colorful
# TODO: allow the user to set their hotkeys in a config file
# TODO: when the user sets the "-o" flag, let the user choose from a list of valid sorting options with fzf

# <------------------- VARIABLES -------------------- >

SORTING_ORDER=""
OWNER_REPO_NAME=""
USER_NAME=""
PREVIEW_WINDOW_VISIBILITY="hidden"
INITIAL_QUERY=""
INITIAL_COMMENT_QUERY=""
OUTPUT_SELECTION=""
# it can happen, if a user defined "LESS" with the "-F" flag in its shell setup, e.g. LESS="-FK -j.5"
# it will overwrite "bat --pager 'less -R' --paging always".
# So the "-F" flag is removed, but the other options will remain the same.
new_less="$(echo "$LESS" | sed 's/-F //;s/-F //;s/-F//;s/F//')"
export LESS=$new_less
LANG_BAT_SETUP="bat --pager 'less -R' --paging always --color always --style plain --language"

# for better speed
CACHE_TIME="20s"
# minimum required fzf version, using "become(...)"
# https://github.com/junegunn/fzf/releases
MIN_FZF_VERSION="0.38.0"
# workflow runs
UPDATE_TIME=10
EXCLUDE_PULL_REQUESTS=true
NUMBER_WORKFLOW_RUN_LIST=20
# colors
COLOR_RESET=$'\e[0m'
GREEN_NORMAL=$'\e[0;92m'
WHITE_BOLD=$'\e[1;97m'

# emojis
REACTION_EMOJI="THUMBS_UP"
valid_emojis=("üëç:THUMBS_UP" "üëé:THUMBS_DOWN" "üòÑ:LAUGH" "üéâ:HOORAY" "üòï:CONFUSED" "üíñ:HEART" "üöÄ:ROCKET" "üëÄ:EYES")
GH_ADD_REACTION=$'gh api graphql --silent --raw-field query=\'mutation($id: ID! $emoji: ReactionContent! ) { addReaction(input: {subjectId: $id content: $emoji }) { clientMutationId }}\''
GH_REMOVE_REACTION=$'gh api graphql --silent --raw-field query=\'mutation($id: ID! $emoji: ReactionContent! ) { removeReaction(input: {subjectId: $id content: $emoji }) { clientMutationId }}\''

# <--------------- HELPER FUNCTIONS ---------------- >

_die_with_octocat() {
	GH_PAGER="cat" gh api octocat
	printf "\e[1;91m[%s] < ERROR > %s\e[0m" "$(date +"%H:%M:%S")" "${1:?"No error message has been defined."}"
	printf "\n%s\n" "${2:-}"
	exit 1
}

# for comparing multi-digit version numbers https://apple.stackexchange.com/a/123408/11374
_version_number() {
	echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

# Here options are defined that are common to all commands.
# https://github.com/junegunn/fzf-git.sh/blob/main/fzf-git.sh#L104
_fzf_basic_options() {
	# Hint: tablerow truncates the table columns to fit the entire table in the current terminal window.
	# The workaround to avoid the truncation is to force a really wide terminal with GH_FORCE_TTY=10000.
	# IMPORTNAT: anything after "$@" will overwrite options in the actual command
	GH_FORCE_TTY=10000 fzf -- \
		--header '' \
		"$@" \
		--ansi --layout reverse --info inline --no-multi --height 100% \
		--ellipsis '' --border horizontal \
		--no-separator --print-query \
		--preview-window "$PREVIEW_WINDOW_VISIBILITY:wrap:right:65%:border-left" \
		--bind 'btab:change-preview-window(50%:nohidden|65%:down:nohidden:border-top|nohidden)' \
		--bind 'ctrl-w:preview-half-page-up,ctrl-s:preview-half-page-down'
}

# More ideas: https://raw.githubusercontent.com/sindresorhus/cli-spinners/master/spinners.json
SPIN_FORM=(‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± ‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± ‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ± ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ± ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ± ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ± ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞)
# Restarting fzf immediately may not show the newly created changes. Wait at least a second or two.
_load_indicator() {
	printf "\n\n%s\n" "${1:-"Restarting ..."}"
	for i in "${SPIN_FORM[@]}"; do
		echo -ne "\r$i"
		sleep "${2:-"0.2"}"
	done
	echo
}

# return the emoji from its corresponding string name
_emoji_from_name() {
	for emoji in "${valid_emojis[@]}"; do
		if [[ "${emoji#*:}" == "$1" ]]; then
			echo "${emoji%%:*}"
			break
		fi
	done
}

# choose a valid emoji from a list
_emoji_picker() {
	for emoji in "${valid_emojis[@]}"; do
		echo "${emoji%%:*} ${emoji#*:}"
	done |
		_fzf_basic_options \
			--header "Pick an emoji and hit enter" \
			--bind 'enter:become:echo {2}' \
			--delimiter ' '
}

# <--------------- FUNCTIONS ---------------- >

help_general_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [Commands] [Flags] [Search term]

${WHITE_BOLD}Commands${COLOR_RESET}
  ${GREEN_NORMAL} i, issue ${COLOR_RESET}  List Issues
  ${GREEN_NORMAL} h, help  ${COLOR_RESET}  Help
  ${GREEN_NORMAL} p, pr    ${COLOR_RESET}  List Pull Requests
  ${GREEN_NORMAL} r, run   ${COLOR_RESET}  List Workflow Runs
  ${GREEN_NORMAL} s, search${COLOR_RESET}  Search for GitHub Repositories
  ${GREEN_NORMAL}st, star  ${COLOR_RESET}  List Starred Repositories
EOF
}

help_issue_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [ i | issue ] [Flags] [Search term]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}<none>${COLOR_RESET}  List Issues from current directory
  ${GREEN_NORMAL}-c    ${COLOR_RESET}  Cache the response, for example "30s", "15m", "1h" (default: 20s)
  ${GREEN_NORMAL}-e    ${COLOR_RESET}  Emoji to make a reaction (default: üëç)
  ${GREEN_NORMAL}-h    ${COLOR_RESET}  Help
  ${GREEN_NORMAL}-o    ${COLOR_RESET}  sorting order of Issues (default: created-desc)
  ${GREEN_NORMAL}-r    ${COLOR_RESET}  Specify a repository (form: OWNER/REPO)
  ${GREEN_NORMAL}-w    ${COLOR_RESET}  Display the preview window upon start (default: hidden)

${WHITE_BOLD}Symbols${COLOR_RESET}
  üí¨  Total number of comments (gray commentable; red locked)
  üì£  Total number of emojis (green reactable; yellow reacted; red locked)

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?         ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}enter     ${COLOR_RESET}  See comments
  ${GREEN_NORMAL}tab       ${COLOR_RESET}  Toggle preview
  ${GREEN_NORMAL}shift+tab ${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+a    ${COLOR_RESET}  ALL Issues
  ${GREEN_NORMAL}ctrl+b    ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+e    ${COLOR_RESET}  Edit an Issue
  ${GREEN_NORMAL}ctrl+f    ${COLOR_RESET}  Fuzzy search
  ${GREEN_NORMAL}ctrl+g    ${COLOR_RESET}  Close Issue after confirmation
  ${GREEN_NORMAL}ctrl+n    ${COLOR_RESET}  New Issue
  ${GREEN_NORMAL}ctrl+o    ${COLOR_RESET}  OPEN Issues only
  ${GREEN_NORMAL}ctrl+p    ${COLOR_RESET}  Put "involves:@me" into the search
  ${GREEN_NORMAL}ctrl+r    ${COLOR_RESET}  Reload
  ${GREEN_NORMAL}ctrl+t    ${COLOR_RESET}  React with $(_emoji_from_name "$REACTION_EMOJI") emoji
  ${GREEN_NORMAL}ctrl+u    ${COLOR_RESET}  Undo the $(_emoji_from_name "$REACTION_EMOJI") emoji reaction
  ${GREEN_NORMAL}ctrl+w/s  ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}ctrl+x    ${COLOR_RESET}  Write a comment
  ${GREEN_NORMAL}shift+up  ${COLOR_RESET}  Switch to Search
  ${GREEN_NORMAL}shift+down${COLOR_RESET}  Switch to Pull Requests
  ${GREEN_NORMAL}esc       ${COLOR_RESET}  Exit
EOF
}

fzf_issue_function() {
	GH_ISSUE_PREVIEW=$'gh api graphql --paginate --raw-field id={1} --raw-field query=\'query($id: ID!, $endCursor: String){node(id: $id) { ... on Issue { author { login } body createdAt comments(first: 100) { totalCount nodes { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}}}} timelineItems(itemTypes: [CLOSED_EVENT, ISSUE_COMMENT, REOPENED_EVENT], first: 100, after: $endCursor) { nodes { ... on ClosedEvent { actor { login } closer { ... on PullRequest { baseRepository { nameWithOwner } number }} createdAt stateReason } ... on IssueComment { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}} reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }}} ... on ReopenedEvent { actor { login } createdAt stateReason }} pageInfo { hasNextPage endCursor }} labels(first:10) { nodes { name } } number reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }} state title viewerDidAuthor }}}\' --template \'{{- $prefix := .data.node -}}{{- $stateIssueColor := "green+b" -}}{{- if eq $prefix.state "CLOSED" -}}{{- $stateIssueColor = "93+b" -}}{{- end -}}{{- $issueAuthor := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow ($prefix.title | color "white+bh") -}}{{- tablerender -}}{{- tablerow (printf "%s ‚óâ #%.0f" $prefix.state $prefix.number | color $stateIssueColor) ($issueAuthor | color $authorColor) (printf "‚îÇ %s ‚àô %.0f Comments ‚îÇ" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") -}}{{- tablerender -}}{{- if $prefix.labels.nodes -}}{{- tablerow ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- tablerender -}}{{- end -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "üòï" }}{{ else if eq .content "EYES" }}{{ $emoji = "üëÄ" }}{{ else if eq .content "HEART" }}{{ $emoji = "üíñ" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "üéâ" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "üòÑ" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "üëé" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "üëç" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "üöÄ" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $bodyText := $prefix.body }}{{ if eq ($bodyText | len) 0 -}}{{- $bodyText = " No description provided. " | color "white+i" -}}{{- end -}}{{- $bodyText -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- range $prefix.timelineItems.nodes -}}{{- $actorTimeline := "[DELETED_USER]" -}}{{- if .actor -}}{{- $actorTimeline = .actor.login -}}{{- end -}}{{- $authorTimelineColor := "cyan+hb" -}}{{- if .viewerDidAuthor -}}{{- $authorTimelineColor = "yellow+bh" -}}{{- end -}}{{- if eq .stateReason "COMPLETED" "NOT_PLANNED" -}}{{- $stateClosedColor := "93+b" -}}{{- if eq .stateReason "NOT_PLANNED" -}}{{- $stateClosedColor = "gray+hb" -}}{{- end -}}{{- $linkedPR := "" -}}{{- if .closer -}}{{- $linkedPR = (printf "%s #%v" .closer.baseRepository.nameWithOwner .closer.number | color "blue+hb") -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s closed this as %s %s %s" ($actorTimeline | color $authorTimelineColor) (.stateReason | color $stateClosedColor) (timeago .createdAt | color "white+bh") $linkedPR) -}}{{- tablerender -}}{{- tablerow  ("‚ó¢‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó£"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else if eq .stateReason "REOPENED" -}}{{- $stateReopenedColor := "green+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color $stateReopenedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s %s this Issue %s" ($actorTimeline | color $authorTimelineColor) (.stateReason | color $stateReopenedColor) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("‚ó¢‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó£"| color $stateReopenedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else -}}{{- $authorTimeline := "[DELETED_USER]" -}}{{- if .author -}}{{- $authorTimeline = .author.login -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($authorTimeline | color $authorTimelineColor) ( timeago .createdAt | color "white+bh") -}}{{- tablerender -}}{{- range .reactionGroups -}}{{ $emojiInComment := .content }}{{ if eq .content "CONFUSED" }}{{ $emojiInComment = "üòï" }}{{ else if eq .content "EYES" }}{{ $emojiInComment = "üëÄ" }}{{ else if eq .content "HEART" }}{{ $emojiInComment = "üíñ" }}{{ else if eq .content "HOORAY" }}{{ $emojiInComment = "üéâ" }}{{ else if eq .content "LAUGH" }}{{ $emojiInComment = "üòÑ" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emojiInComment = "üëé" }}{{ else if eq .content "THUMBS_UP" }}{{ $emojiInComment = "üëç" }}{{ else if eq .content "ROCKET" }}{{ $emojiInComment = "üöÄ" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiInCommentGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiInCommentGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiInCommentTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiInCommentTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiInCommentTotal $emojiInComment) $emojiInCommentGiver -}}{{- tablerender -}}{{- end -}}{{- end -}}{{- tablerow  ("‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- .body -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- end -}}{{- end -}}\''

	# fzf allows hiding columns "--with-nth 2...", headers are also affected, so NODE_ID_HIDDEN is included there
	GH_ISSUE_COMMAND=$'gh api graphql --raw-field query=\'query($filter: String!) {search(query: $filter, type: ISSUE, first: 35) {issueCount nodes { ... on Issue { author { login } comments {totalCount} id number updatedAt reactions { totalCount viewerHasReacted } state title viewerCanReact viewerDidAuthor }}}}\' --template \'
		{{- $limitCount := .data.search.issueCount -}}
			{{- if gt .data.search.issueCount 35.0 -}}{{- $limitCount = 35.0 -}}{{- end -}}
		{{- tablerow "NODE_ID_HIDDEN" (printf "%.0f of ‚àë %.0f" $limitCount .data.search.issueCount | color "blue+b") ("|" | color "white+d") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow "NODE_ID_HIDDEN" ("ISSUE" | color $headerColor) ("AUTHOR" | color $headerColor) ("LAST UPDATE" | color $headerColor) "üí¨" "üì£" ("TITLE" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $stateIssueColor := "green" -}}
				{{- if eq .state "CLOSED" -}}{{- $stateIssueColor = "93" -}}{{- end -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $commentCount := "\u00a0" -}}{{- /* NOTE: U+00a0 (non-breaking space) for entries without comments, which the viewer can comment on. Needed to make a if decision with fzf later in the script. */ -}}
				{{- if not .viewerCanReact -}}{{- $commentCount = (or (printf "%.0f" .comments.totalCount) "0")  -}}
					{{- else if .comments.totalCount -}}{{- $commentCount = printf "%.0f" .comments.totalCount -}}
				{{- end -}}
			{{- $commentColor := "white+bd" -}}
				{{- if not .viewerCanReact -}}{{- $commentColor = "red+bd" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id (printf "#%.0f" .number | color $stateIssueColor) ($author | color $authorColor) (timeago .updatedAt) ($commentCount | color $commentColor) ($emojiCount | color $emojiColor) .title -}}
		{{- end -}}\''

	INITIAL_ISSUE_PROMPT=$(grep -q A <"$SCRATCH_FILE" && printf "Issues ‚óâ [%s] > " "$OWNER_REPO_NAME" || printf "\e[1;92mOPEN Issues ‚óâ [%s] > " "$OWNER_REPO_NAME")

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME $INITIAL_QUERY \" || $GH_ISSUE_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open $INITIAL_QUERY \") || true" \
		_fzf_basic_options --disabled --header-lines 3 --with-nth 2.. \
		--prompt "$INITIAL_ISSUE_PROMPT" \
		--query "$INITIAL_QUERY" --preview "sleep 0.35; $GH_ISSUE_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "change:first+reload-sync:sleep 0.25; (grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "?:toggle-preview+change-preview:echo '$(help_issue_function)'" \
		--bind "tab:toggle-preview+change-preview:sleep 0.35; $GH_ISSUE_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "ctrl-a:rebind(change)+change-prompt(Issues ‚óâ [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo A >$SCRATCH_FILE)+reload-sync:$GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || true" \
		--bind "ctrl-b:execute-silent(gh issue view {2} --web --repo $OWNER_REPO_NAME)" \
		--bind $'ctrl-f:unbind(change)+enable-search+clear-query+change-prompt(\e[1;93mFUZZY SEARCH'" [$OWNER_REPO_NAME] > )" \
		--bind $'ctrl-o:rebind(change)+change-prompt(\e[1;92mOPEN Issues ‚óâ'" [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo B >$SCRATCH_FILE)+reload-sync:$GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q} || true" \
		--bind "ctrl-p:put(involves:@me)" \
		--bind "ctrl-r:reload-sync:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--expect "ctrl-e,ctrl-g,ctrl-n,ctrl-x,enter,shift-up,shift-down") || true

	printed_query="$(sed 1q <<<"$OUTPUT_SELECTION")"
	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	TICKET_NUMBER="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $2}' | tr -d "#")"
	output_textline="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{$1=""; print $0}')"
	number_comments="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $6,$7}' | grep -Eo '[0-9]+' || true)"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	ctrl-e)
		gh issue edit "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_issue_function 0s
		;;
	ctrl-g)
		printf "\n%s\n\nCONFIRM CLOSURE (y/n) " "$output_textline"
		stty raw -echo
		CONFIRM=$(dd bs=1 count=1 2>/dev/null)
		stty sane
		if [[ "$CONFIRM" = "y" ]]; then
			printf "\n\nDo you want to add a comment? (y/n) "
			stty raw -echo
			CONFIRM=$(dd bs=1 count=1 2>/dev/null)
			stty sane
			if [[ "$CONFIRM" = "y" ]]; then
				read -rp "Enter a comment: " message
				gh issue close "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME" --comment "$message" 2>/dev/null && printf "\nüü¢ Success.... Issue closed\n" || printf "\nüõë Missing permissions to close this Issue!\n"
			else
				gh issue close "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME" 2>/dev/null && printf "\nüü¢ Success.... Issue closed\n" || printf "\nüõë Missing permissions to close this Issue!\n"
			fi
			_load_indicator
			INITIAL_QUERY="$printed_query"
			fzf_issue_function 0s
		else
			printf "\nDiscarding... Issue was not closed!"
			_load_indicator
			INITIAL_QUERY="$printed_query"
			fzf_issue_function
		fi
		;;
	ctrl-n)
		gh issue create --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_issue_function 0s
		;;
	ctrl-x)
		gh issue comment "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_issue_function 0s
		;;
	enter)
		INITIAL_QUERY="$printed_query"
		if [ -z "$number_comments" ]; then
			# adding U+00a0 (non-breaking space) for isues with zero comments and commentable
			# without it an issue with 0 comments and >1 reaction would trick the if check
			# sometimes the "age" column can only be 2 words instead of 3, e.g. "just now", that is why $6 and $7
			_load_indicator $'No comments on this issue\nRestarting ...'
			fzf_issue_function 0s
		else
			fzf_issue_comment_function
		fi
		;;
	shift-up)
		INITIAL_QUERY=""
		fzf_search_function
		;;
	shift-down)
		INITIAL_QUERY=""
		fzf_pr_function
		;;
	esac
}

help_issue_comment_function() {
	cat <<EOF
${WHITE_BOLD}Symbols${COLOR_RESET}
  üì£  Total number of emojis (green reactable; yellow reacted; red locked)

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?        ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}tab      ${COLOR_RESET}  Toggle preview
  ${GREEN_NORMAL}shift+tab${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+b   ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+n   ${COLOR_RESET}  New Issue
  ${GREEN_NORMAL}ctrl+t   ${COLOR_RESET}  React with $(_emoji_from_name "$REACTION_EMOJI") emoji
  ${GREEN_NORMAL}ctrl+u   ${COLOR_RESET}  Undo the $(_emoji_from_name "$REACTION_EMOJI") emoji reaction
  ${GREEN_NORMAL}ctrl+w/s ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}ctrl+x   ${COLOR_RESET}  Write a comment
  ${GREEN_NORMAL}ctrl+z   ${COLOR_RESET}  Delete the comment after confirmation
  ${GREEN_NORMAL}esc      ${COLOR_RESET}  Return to Issue list
EOF
}

# Get the name and date of the commenter, convert the emojis to real emojis, add the total number next to it. Highlight if the viewer has used it.
# Get the last 4 emoji reactor names for each group,
# based on the length of the array of reactor names, either print or slice 1 and add a ", ..." as an indicator of more than three
# End the list with the commenter's actual message.
GH_COMMENTS_PREVIEW=$'gh api graphql --raw-field id={1} --raw-field query=\'query($id: ID! ){node(id: $id) {... on Comment { author{login} body createdAt viewerDidAuthor} ... on Reactable { reactionGroups { content viewerHasReacted reactors(last: 4) { nodes {... on User { login }} totalCount }}}}}\' --template \'{{- $prefix := .data.node -}}{{- $author := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $author = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($author | color $authorColor) (timeago $prefix.createdAt | color "white+bh") -}}{{- tablerender -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "üòï" }}{{ else if eq .content "EYES" }}{{ $emoji = "üëÄ" }}{{ else if eq .content "HEART" }}{{ $emoji = "üíñ" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "üéâ" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "üòÑ" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "üëé" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "üëç" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "üöÄ" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $prefix.body -}}\''

fzf_issue_comment_function() {
	GH_ISSUE_COMMENTS_COMMAND=$'gh api graphql --paginate --raw-field query=\'query ($owner: String!, $name: String!, $number: Int!, $endCursor: String) { repository(owner: $owner, name: $name) { issue(number: $number) { author { login } createdAt labels(first:10) { nodes { name } } number state title comments(first: 100, after: $endCursor) { totalCount nodes { author { login } body createdAt databaseId id reactions { totalCount viewerHasReacted } viewerCanReact viewerDidAuthor } pageInfo { endCursor hasNextPage }}}}}\' --template \'
		{{- $prefix := .data.repository.issue -}}
		{{- $stateIssueCommentColor := "green" -}}
			{{- if eq $prefix.state "CLOSED" -}}{{- $stateIssueCommentColor = "93" -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ($prefix.title | color "white+bh") -}}{{- tablerender -}}
		{{- $issueAuthor := "[DELETED_USER]" -}}
			{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" (printf "%s ‚óâ #%.0f" $prefix.state $prefix.number | color $stateIssueCommentColor) ($issueAuthor | color "cyan+hb") (printf "‚îÇ %s ‚àô %.0f Comments ‚îÇ" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
			{{- if $prefix.labels.nodes -}}{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- else -}}{{- tablerow "" -}}{{- end -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî" | color "gray+d") -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("COMMENTER" | color $headerColor) ("AGE" | color $headerColor) "üì£" ("COMMENT" | color $headerColor) -}}
		{{- range $prefix.comments.nodes -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id .databaseId ($author | color $authorColor) (timeago .createdAt) ($emojiCount | color $emojiColor) .body -}}
		{{- end -}}\''

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="$GH_ISSUE_COMMENTS_COMMAND --cache ${1:-$CACHE_TIME} --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER" \
		_fzf_basic_options --header-lines 6 --with-nth 3.. \
		--query "$INITIAL_COMMENT_QUERY" --prompt $'\e[1;94m'"Issue üí¨ [$OWNER_REPO_NAME] > " \
		--preview-window "+5:~5" --preview "$GH_COMMENTS_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "?:toggle-preview+change-preview:echo '$(help_issue_comment_function)'" \
		--bind "tab:toggle-preview+change-preview:$GH_COMMENTS_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "ctrl-b:execute-silent(open https://github.com/$OWNER_REPO_NAME/issues/$TICKET_NUMBER#issuecomment-{2})" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:$GH_ISSUE_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:$GH_ISSUE_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER || true" \
		--expect "ctrl-n,ctrl-x,ctrl-z,esc") || true

	printed_query="$(sed 1q <<<"$OUTPUT_SELECTION")"
	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	output_textline="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{$1=""; print $0}')"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	ctrl-n)
		gh issue create --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_issue_function 0s
		;;
	ctrl-x)
		gh issue comment "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_COMMENT_QUERY="$printed_query"
		fzf_issue_comment_function 0s
		;;
	ctrl-z)
		printf "\n%s\n\nCONFIRM DELETION (y/n) " "$output_textline"
		stty raw -echo
		CONFIRM=$(dd bs=1 count=1 2>/dev/null)
		stty sane
		if [[ "$CONFIRM" = "y" ]]; then
			gh api graphql --silent --raw-field id="$(sed 1d <<<"${OUTPUT_SELECTION}" | awk '{print $1}')" --raw-field query=$'mutation($id: ID!) { deleteIssueComment(input: {id: $id}) { clientMutationId }}' 2>/dev/null && printf "\nüü¢ Success.... comment deleted\n" || printf "\nüõë Missing permissions to delete this comment!\n"
			_load_indicator
			INITIAL_QUERY="$printed_query"
			fzf_issue_function 0s
		else
			printf "\nDiscarding... comment was not deleted!"
			_load_indicator
			INITIAL_COMMENT_QUERY="$printed_query"
			fzf_issue_comment_function
		fi
		;;
	esc)
		INITIAL_COMMENT_QUERY=""
		fzf_issue_function
		;;
	esac
}

###################################### PULL REQUEST (PR)

help_pr_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [ p | pr ] [Flags] [Search term]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}<none>${COLOR_RESET}  List Pull Requests from current directory
  ${GREEN_NORMAL}-c    ${COLOR_RESET}  Cache the response, for example "30s", "15m", "1h" (default: 20s)
  ${GREEN_NORMAL}-e    ${COLOR_RESET}  Emoji to make a reaction (default: üëç )
  ${GREEN_NORMAL}-h    ${COLOR_RESET}  Help
  ${GREEN_NORMAL}-o    ${COLOR_RESET}  sorting order of Pull Requests (default: created-desc)
  ${GREEN_NORMAL}-r    ${COLOR_RESET}  Specify a repo (form: OWNER/REPO)
  ${GREEN_NORMAL}-w    ${COLOR_RESET}  Display the preview window upon start (default: hidden)

${WHITE_BOLD}Symbols${COLOR_RESET}
  üí¨  Total number of comments (gray commentable; red locked)
  üì£  Total number of emojis (green reactable; yellow reacted; red locked)
  +   Additions
  -   Deletions

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?         ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}enter     ${COLOR_RESET}  See comments
  ${GREEN_NORMAL}tab       ${COLOR_RESET}  Toggle preview
  ${GREEN_NORMAL}shift+tab ${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+a    ${COLOR_RESET}  ALL Pull Requests
  ${GREEN_NORMAL}ctrl+b    ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+d    ${COLOR_RESET}  Toggle diff
  ${GREEN_NORMAL}ctrl+e    ${COLOR_RESET}  Edit a Pull Request
  ${GREEN_NORMAL}ctrl+f    ${COLOR_RESET}  Fuzzy search
  ${GREEN_NORMAL}ctrl+g    ${COLOR_RESET}  Merge a Pull Request
  ${GREEN_NORMAL}ctrl+o    ${COLOR_RESET}  OPEN Pull Requests only
  ${GREEN_NORMAL}ctrl+p    ${COLOR_RESET}  Put "involves:@me" into the search
  ${GREEN_NORMAL}ctrl+r    ${COLOR_RESET}  Reload
  ${GREEN_NORMAL}ctrl+t    ${COLOR_RESET}  React with $(_emoji_from_name "$REACTION_EMOJI") emoji
  ${GREEN_NORMAL}ctrl+u    ${COLOR_RESET}  Undo the $(_emoji_from_name "$REACTION_EMOJI") emoji reaction
  ${GREEN_NORMAL}ctrl+w/s  ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}ctrl+x    ${COLOR_RESET}  Write a comment
  ${GREEN_NORMAL}ctrl+y    ${COLOR_RESET}  Checkout
  ${GREEN_NORMAL}shift+up  ${COLOR_RESET}  Switch to Issues
  ${GREEN_NORMAL}shift+down${COLOR_RESET}  Switch to Workflow Runs
  ${GREEN_NORMAL}esc       ${COLOR_RESET}  Exit
EOF
}

fzf_pr_function() {
	GH_PR_PREVIEW=$'gh api graphql --paginate --raw-field id={1} --raw-field query=\'query($id: ID!, $endCursor: String){node(id: $id) {... on PullRequest { author { login } body createdAt comments(first: 100) { totalCount nodes { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}}}} timelineItems(itemTypes: [CLOSED_EVENT, MERGED_EVENT, ISSUE_COMMENT], first: 100, after: $endCursor) { nodes { ... on ClosedEvent { actor { login } createdAt stateReason } ... on IssueComment { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}} reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }}} ... on MergedEvent { actor { login } createdAt mergeRef { repository { name } name } commit { abbreviatedOid }}} pageInfo { hasNextPage endCursor }} labels(first:10) { nodes { name } } number reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }} state title viewerDidAuthor }}}\' --template \'{{- $prefix := .data.node -}}{{- $statePRColor := "green+b" -}}{{- if eq $prefix.state "CLOSED" -}}{{- $statePRColor = "red+b" -}}{{- else if eq $prefix.state "MERGED" -}}{{- $statePRColor = "magenta+b" -}}{{- end -}}{{- $issueAuthor := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow ($prefix.title | color "white+bh") -}}{{- tablerender -}}{{- tablerow (printf "%s Ôêá #%.0f" $prefix.state $prefix.number | color $statePRColor) ($issueAuthor | color $authorColor) (printf "‚îÇ %s ‚àô %.0f Comments ‚îÇ" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") -}}{{- tablerender -}}{{- if $prefix.labels.nodes -}}{{- tablerow ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- tablerender -}}{{- end -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "üòï" }}{{ else if eq .content "EYES" }}{{ $emoji = "üëÄ" }}{{ else if eq .content "HEART" }}{{ $emoji = "üíñ" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "üéâ" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "üòÑ" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "üëé" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "üëç" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "üöÄ" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $bodyText := $prefix.body }}{{ if eq ($bodyText | len) 0 -}}{{- $bodyText = " No description provided. " | color "white+i" -}}{{- end -}}{{- $bodyText -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- range $prefix.timelineItems.nodes -}}{{- $actorTimeline := "[DELETED_USER]" -}}{{- if .actor -}}{{- $actorTimeline = .actor.login -}}{{- end -}}{{- $authorTimelineColor := "cyan+hb" -}}{{- if .viewerDidAuthor -}}{{- $authorTimelineColor = "yellow+bh" -}}{{- end -}}{{- if .mergeRef -}}{{- $stateMergedColor := "93+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color $stateMergedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s merged %s into %s %s" ($actorTimeline | color $authorTimelineColor) (.commit.abbreviatedOid | color $stateMergedColor) (printf "%s:%s" .mergeRef.repository.name .mergeRef.name) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("‚ó¢‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó£"| color $stateMergedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else if eq .stateReason "COMPLETED" -}}{{- $stateClosedColor := "red+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s closed this %s" ($actorTimeline | color $authorTimelineColor) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("‚ó¢‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó£"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else -}}{{- $authorTimeline := "[DELETED_USER]" -}}{{- if .author -}}{{- $authorTimeline = .author.login -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("‚ó•‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ó§"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($authorTimeline | color $authorTimelineColor) ( timeago .createdAt | color "white+bh") -}}{{- tablerender -}}{{- range .reactionGroups -}}{{ $emojiInComment := .content }}{{ if eq .content "CONFUSED" }}{{ $emojiInComment = "üòï" }}{{ else if eq .content "EYES" }}{{ $emojiInComment = "üëÄ" }}{{ else if eq .content "HEART" }}{{ $emojiInComment = "üíñ" }}{{ else if eq .content "HOORAY" }}{{ $emojiInComment = "üéâ" }}{{ else if eq .content "LAUGH" }}{{ $emojiInComment = "üòÑ" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emojiInComment = "üëé" }}{{ else if eq .content "THUMBS_UP" }}{{ $emojiInComment = "üëç" }}{{ else if eq .content "ROCKET" }}{{ $emojiInComment = "üöÄ" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiInCommentGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiInCommentGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiInCommentTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiInCommentTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiInCommentTotal $emojiInComment) $emojiInCommentGiver -}}{{- tablerender -}}{{- end -}}{{- end -}}{{- tablerow  ("‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•‚Ä•"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- .body -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- end -}}{{- end -}}\''

	# fzf allows hiding columns "--with-nth 2...", headers are also affected, so NODE_ID_HIDDEN is included there
	GH_PR_COMMAND=$'gh api graphql --raw-field query=\'query($filter: String!) {search(query: $filter, type: ISSUE, first: 35) {issueCount nodes { ... on PullRequest { additions author { login } comments {totalCount} deletions id number updatedAt reactions { totalCount viewerHasReacted } state title viewerCanReact viewerDidAuthor }}}}\' --template \'
		{{- $limitCount := .data.search.issueCount -}}
			{{- if gt .data.search.issueCount 35.0 -}}{{- $limitCount = 35.0 -}}{{- end -}}
		{{- tablerow "NODE_ID_HIDDEN" (printf "%.0f of ‚àë %.0f" $limitCount .data.search.issueCount | color "blue+b") ("|" | color "white+d") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow "NODE_ID_HIDDEN" ("PR" | color $headerColor) ("AUTHOR" | color $headerColor) ("LAST UPDATE" | color $headerColor) "üí¨" "üì£" ("+" | color "green+bd") ("-" | color "red+bd") ("TITLE" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $statePullRequestColor := "green" -}}
				{{- if eq .state "CLOSED" }}{{ $statePullRequestColor = "red" }}{{- else if eq .state "MERGED" }}{{ $statePullRequestColor = "magenta" }}{{ end -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $commentCount := "\u00a0" -}}{{- /* NOTE: U+00a0 (non-breaking space) for entries without comments, which the viewer can comment on. Needed to make a if decision with fzf later in the script. */ -}}
				{{- if not .viewerCanReact -}}{{- $commentCount = (or (printf "%.0f" .comments.totalCount) "0")  -}}
					{{- else if .comments.totalCount -}}{{- $commentCount = printf "%.0f" .comments.totalCount -}}
				{{- end -}}
			{{- $commentColor := "white+bd" -}}
				{{- if not .viewerCanReact -}}{{- $commentColor = "red+bd" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id (printf "#%.0f" .number | color $statePullRequestColor) ($author | color $authorColor) (timeago .updatedAt) ($commentCount | color $commentColor) ($emojiCount | color $emojiColor) (printf "+%.0f" .additions | color "green") (printf "-%.0f" .deletions | color "red") .title -}}
		{{- end -}}\''

	INITIAL_PR_PROMPT=$(grep -q A <"$SCRATCH_FILE" && printf "Pull Requests Ôêá [%s] > " "$OWNER_REPO_NAME" || printf "\e[1;92mOPEN Pull Requests Ôêá [%s] > " "$OWNER_REPO_NAME")

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME $INITIAL_QUERY \" || $GH_PR_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open $INITIAL_QUERY \") || true" \
		_fzf_basic_options --disabled --header-lines 3 --with-nth 2.. \
		--prompt "$INITIAL_PR_PROMPT" \
		--query "$INITIAL_QUERY" --preview "sleep 0.35; $GH_PR_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "change:first+reload-sync:sleep 0.25; (grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "?:toggle-preview+change-preview:echo '$(help_pr_function)'" \
		--bind "tab:toggle-preview+change-preview:sleep 0.35; $GH_PR_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "ctrl-a:rebind(change)+change-prompt(Pull Requests Ôêá [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo A >$SCRATCH_FILE)+reload-sync:$GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || true" \
		--bind "ctrl-b:execute-silent(gh pr view {2} --web --repo $OWNER_REPO_NAME)" \
		--bind $'ctrl-f:unbind(change)+enable-search+clear-query+change-prompt(\e[1;93mFUZZY SEARCH'" [$OWNER_REPO_NAME] > )" \
		--bind "ctrl-d:toggle-preview+change-preview(gh pr diff {2} --repo $OWNER_REPO_NAME"$' | if type -p delta >/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi)' \
		--bind $'ctrl-o:rebind(change)+change-prompt(\e[1;92mOPEN Pull Requests Ôêá'" [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo B >$SCRATCH_FILE)+reload-sync:$GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q} || true" \
		--bind "ctrl-p:put(involves:@me)" \
		--bind "ctrl-r:reload-sync:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--expect "ctrl-e,ctrl-g,ctrl-x,ctrl-y,enter,shift-up,shift-down") || true

	printed_query="$(sed 1q <<<"$OUTPUT_SELECTION")"
	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	TICKET_NUMBER="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $2}' | tr -d "#")"
	output_textline="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{$1=""; print $0}')"
	number_comments="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $6,$7}' | grep -Eo '[0-9]+' || true)"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	ctrl-e)
		gh pr edit "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_pr_function 0s
		;;
	ctrl-g)
		gh pr merge "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		exit 0
		;;
	ctrl-x)
		gh pr comment "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_QUERY="$printed_query"
		fzf_pr_function 0s
		;;
	ctrl-y)
		gh pr checkout "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		exit 0
		;;
	enter)
		INITIAL_QUERY="$printed_query"
		if [ -z "$number_comments" ]; then
			_load_indicator $'No comments on this Pull Request\nRestarting ...'
			fzf_pr_function
		else
			fzf_pr_comment_function
		fi
		;;
	shift-up)
		INITIAL_QUERY=""
		fzf_issue_function
		;;
	shift-down)
		INITIAL_QUERY=""
		fzf_workflow_run_function
		;;
	esac
}

help_pr_comment_function() {
	cat <<EOF
${WHITE_BOLD}Symbols${COLOR_RESET}
  üì£  Total number of emojis (green reactable; yellow reacted; red locked)

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?        ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}tab      ${COLOR_RESET}  Toggle preview
  ${GREEN_NORMAL}shift+tab${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+b   ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+d   ${COLOR_RESET}  Toggle diff
  ${GREEN_NORMAL}ctrl+t   ${COLOR_RESET}  React with $(_emoji_from_name "$REACTION_EMOJI") emoji
  ${GREEN_NORMAL}ctrl+u   ${COLOR_RESET}  Undo the $(_emoji_from_name "$REACTION_EMOJI") emoji reaction
  ${GREEN_NORMAL}ctrl+w/s ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}ctrl+x   ${COLOR_RESET}  Write a comment
  ${GREEN_NORMAL}esc      ${COLOR_RESET}  Return to Pull Request list
EOF
}

fzf_pr_comment_function() {
	GH_PR_COMMENTS_COMMAND=$'gh api graphql --paginate --raw-field query=\'query ($owner: String!, $name: String!, $number: Int!, $endCursor: String) { repository(owner: $owner, name: $name) { pullRequest(number: $number) { author { login } createdAt labels(first:10) { nodes { name } } number state title comments(first: 100, after: $endCursor) { totalCount nodes { author { login } body createdAt databaseId id reactions { totalCount viewerHasReacted } viewerCanReact viewerDidAuthor } pageInfo { endCursor hasNextPage }}}}}\' --template \'
		{{- $prefix := .data.repository.pullRequest -}}
		{{- $statePullRequestCommentColor := "green" -}}
			{{- if eq $prefix.state "CLOSED" -}}{{- $statePullRequestCommentColor = "red+b" -}}{{- else if eq $prefix.state "MERGED" }}{{- $statePullRequestCommentColor = "magenta+b" -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ($prefix.title | color "white+bh") -}}{{- tablerender -}}
		{{- $pullRequestAuthor := "[DELETED_USER]" -}}
			{{- if $prefix.author -}}{{- $pullRequestAuthor = $prefix.author.login -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" (printf "%s Ôêá #%.0f" $prefix.state $prefix.number | color $statePullRequestCommentColor) ($pullRequestAuthor | color "cyan+hb") (printf "‚îÇ %s ‚àô %.0f Comments ‚îÇ" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
			{{- if $prefix.labels.nodes -}}{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- else -}}{{- tablerow "" -}}{{- end -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî" | color "gray+d") -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("COMMENTER" | color $headerColor) ("AGE" | color $headerColor) "üì£" ("COMMENT" | color $headerColor) -}}
		{{- range $prefix.comments.nodes -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id .databaseId ($author | color $authorColor) (timeago .createdAt) ($emojiCount | color $emojiColor) .body -}}
		{{- end -}}\''

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="$GH_PR_COMMENTS_COMMAND --cache ${1:-$CACHE_TIME} --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER" \
		_fzf_basic_options --header-lines 6 --with-nth 3.. \
		--prompt $'\e[1;94m'"Pull Request üí¨ [$OWNER_REPO_NAME] > " \
		--preview-window "+5:~5" --preview "$GH_COMMENTS_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "?:toggle-preview+change-preview:echo '$(help_pr_comment_function)'" \
		--bind "tab:toggle-preview+change-preview:$GH_COMMENTS_PREVIEW | $LANG_BAT_SETUP md" \
		--bind "ctrl-b:execute-silent(open https://github.com/$OWNER_REPO_NAME/pull/$TICKET_NUMBER#issuecomment-{2})" \
		--bind "ctrl-d:toggle-preview+change-preview(gh pr diff $TICKET_NUMBER --repo $OWNER_REPO_NAME"$' | if type -p delta >/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi)' \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:$GH_PR_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload-sync:$GH_PR_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$TICKET_NUMBER || true" \
		--expect "ctrl-x,esc") || true

	printed_query="$(sed 1q <<<"$OUTPUT_SELECTION")"
	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	ctrl-x)
		gh issue comment "$TICKET_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator
		INITIAL_COMMENT_QUERY="$printed_query"
		fzf_pr_comment_function 0s
		;;
	esc)
		INITIAL_COMMENT_QUERY=""
		fzf_pr_function
		;;
	esac
}

###################################### WORKFLOW RUNS
help_workflow_run_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [ r | run ] [Flags] [Search term]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}<none>${COLOR_RESET}  List Workflow Runs from current directory
  ${GREEN_NORMAL}-h    ${COLOR_RESET}  Help
  ${GREEN_NORMAL}-n    ${COLOR_RESET}  Number of listed Runs  (default: 10, max: 100)
  ${GREEN_NORMAL}-p    ${COLOR_RESET}  Pull Requests are included in the list (default: not included)
  ${GREEN_NORMAL}-r    ${COLOR_RESET}  Specify a repository (form: OWNER/REPO)
  ${GREEN_NORMAL}-u    ${COLOR_RESET}  Update the list every ${UPDATE_TIME} seconds (default: 10)
  ${GREEN_NORMAL}-w    ${COLOR_RESET}  Display the preview window upon start (default: hidden)

${WHITE_BOLD}Symbols${COLOR_RESET}
  üëÄ  List is updated every ${UPDATE_TIME}s, stop it with a defined hotkey
  üèÅ  Status
  ‚åõÔ∏è  Elapsed Time

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?        ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}enter    ${COLOR_RESET}  See logs, press "q" to return
  ${GREEN_NORMAL}tab      ${COLOR_RESET}  Toggle preview
  ${GREEN_NORMAL}shift+tab${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+a   ${COLOR_RESET}  Attached artifacts are downloaded
  ${GREEN_NORMAL}ctrl+b   ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+d   ${COLOR_RESET}  Delete a Run
  ${GREEN_NORMAL}ctrl+f   ${COLOR_RESET}  See failed logs
  ${GREEN_NORMAL}ctrl+r   ${COLOR_RESET}  Start updating üëÄ the list every ${UPDATE_TIME}s
  ${GREEN_NORMAL}ctrl+u   ${COLOR_RESET}  Stop updating the list every ${UPDATE_TIME}s
  ${GREEN_NORMAL}ctrl+w/s ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}ctrl+x   ${COLOR_RESET}  Cancel a Run
  ${GREEN_NORMAL}shift+up ${COLOR_RESET}  Switch to Pull Requests
  ${GREEN_NORMAL}esc      ${COLOR_RESET}  Exit
EOF
}

fzf_workflow_run_function() {
	INITIAL_WORKFLOW_PROMPT="Workflow Runs ÔÖÑ $(printf "[%s]" "$OWNER_REPO_NAME")"
	GH_WORKFLOWS_COMMAND="gh api --cache ${UPDATE_TIME}s --method GET --raw-field exclude_pull_requests=$EXCLUDE_PULL_REQUESTS --field per_page=$NUMBER_WORKFLOW_RUN_LIST repos/$OWNER_REPO_NAME/actions/runs "$'--jq \'["ID", "URL", "STATUS", "üèÅ", "‚åõÔ∏è", "DATE", "WORKFLOW", "BRANCH", "TITLE"], (.workflow_runs[] | [.id, .html_url, .status, (if (.conclusion == null and .status == null) then "¬†" elif .conclusion == null then .status else .conclusion end), ((if .status == "in_progress" then now else (.updated_at | fromdateiso8601) end) - (.created_at | fromdateiso8601) | (./60|floor)+(.%60/60*100|round/100) | .*100|round/100), (.created_at | fromdateiso8601) as $time_sec | if ((now - $time_sec) / 3600) < 1 then ((now - $time_sec) / 60 | floor) | tostring + "min ago" elif ((now - $time_sec) / 3600) < 24 then ((now - $time_sec) / 3600 | floor) | tostring + "h ago" else ($time_sec | strftime("%d/%b/%y")) end, .name, .head_branch, .display_title]) | @tsv\' | column -t -s "\t"'

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="$GH_WORKFLOWS_COMMAND" \
		_fzf_basic_options --header-lines 1 --with-nth 4.. \
		--header $'\n? Help ¬∑ esc Quit\n\n' \
		--prompt "$INITIAL_WORKFLOW_PROMPT üëÄ ${UPDATE_TIME}s > " \
		--query "$INITIAL_QUERY" \
		--preview "gh run view {1} --repo $OWNER_REPO_NAME" \
		--bind "tab:toggle-preview+change-preview:gh run view {1} --repo $OWNER_REPO_NAME" \
		--bind "?:toggle-preview+change-preview:echo '$(help_workflow_run_function)'" \
		--bind "load:reload-sync:sleep $UPDATE_TIME;$GH_WORKFLOWS_COMMAND || true" \
		--bind "ctrl-a:become(gh run download {1} --repo $OWNER_REPO_NAME)+reload-sync:$GH_WORKFLOWS_COMMAND || true" \
		--bind "ctrl-b:execute-silent:open {2}" \
		--bind "ctrl-d:execute-silent(gh run delete {1} --repo $OWNER_REPO_NAME)+reload-sync:$GH_WORKFLOWS_COMMAND || true" \
		--bind "ctrl-r:rebind(load)+change-prompt($INITIAL_WORKFLOW_PROMPT üëÄ ${UPDATE_TIME}s > )+reload-sync:$GH_WORKFLOWS_COMMAND || true" \
		--bind "ctrl-u:unbind(load)+change-prompt:$INITIAL_WORKFLOW_PROMPT > " \
		--bind "ctrl-x:execute-silent(gh run cancel {1} --repo $OWNER_REPO_NAME)+reload-sync:$GH_WORKFLOWS_COMMAND || true" \
		--expect "ctrl-f,enter,shift-up") || true

	printed_query="$(sed 1q <<<"$OUTPUT_SELECTION")"
	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	output_id="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $1}')"
	output_status="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $3}')"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	enter)
		if grep -Eq 'in_progress|queued' <<<"$output_status"; then
			gh run watch --repo "$OWNER_REPO_NAME"
		elif ! gh run view --log "$output_id" --repo "$OWNER_REPO_NAME" &>/dev/null; then
			_load_indicator $'No logs found\nRestarting ...'
		else
			GH_PAGER="$LANG_BAT_SETUP log" gh run view --log "$output_id" --repo "$OWNER_REPO_NAME"
		fi
		INITIAL_QUERY="$printed_query"
		fzf_workflow_run_function
		;;
	ctrl-f)
		if ! gh run view --log-failed "$output_id" --repo "$OWNER_REPO_NAME" &>/dev/null; then
			_load_indicator $'No failed logs found\nRestarting ...'
		else
			GH_PAGER="$LANG_BAT_SETUP log" gh run view --log-failed "$output_id" --repo "$OWNER_REPO_NAME"
		fi
		INITIAL_QUERY="$printed_query"
		fzf_workflow_run_function
		;;
	shift-up)
		INITIAL_QUERY=""
		fzf_pr_function
		;;
	esac
}

###################################### SEARCH
help_search_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [ s | search ] [Flags] [Search term]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}<term>${COLOR_RESET}  Search for GitHub repos
  ${GREEN_NORMAL}-c    ${COLOR_RESET}  Cache the response, for example "30s", "15m", "1h" (default: 20s)
  ${GREEN_NORMAL}-h    ${COLOR_RESET}  Help
  ${GREEN_NORMAL}-w    ${COLOR_RESET}  Display the preview window upon start (default: hidden)

${WHITE_BOLD}Symbols${COLOR_RESET}
  ‚≠ê  Number of stargazers
  üèÅ  Primary language

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?         ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}tab       ${COLOR_RESET}  Preview README
  ${GREEN_NORMAL}shift+tab ${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+b    ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+f    ${COLOR_RESET}  Preview release infos
  ${GREEN_NORMAL}ctrl+r    ${COLOR_RESET}  Reload
  ${GREEN_NORMAL}ctrl+t    ${COLOR_RESET}  Star repo
  ${GREEN_NORMAL}ctrl+u    ${COLOR_RESET}  Unstar repo
  ${GREEN_NORMAL}ctrl+w/s  ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}shift+up  ${COLOR_RESET}  Switch to your starred repos
  ${GREEN_NORMAL}shift+down${COLOR_RESET}  Switch to Issues
  ${GREEN_NORMAL}esc       ${COLOR_RESET}  Exit
EOF
}

fzf_search_function() {
	GH_SEARCH_COMMAND=$'gh api graphql --raw-field query=\'query($filter: String!) { search(query: $filter, type: REPOSITORY, first: 25) { repositoryCount nodes { ... on Repository {description isFork name owner {login} primaryLanguage {name} defaultBranchRef { target { ... on Commit { history(first: 1) { nodes { committedDate }}}}} stargazerCount viewerHasStarred}}}}\' --template=\'
		{{- $limitCount := .data.search.repositoryCount -}}
			{{- if gt .data.search.repositoryCount 25.0 -}}{{- $limitCount = 25.0 -}}{{- end -}}
		{{- tablerow (printf "%.0f of ‚àë %.0f Repos" $limitCount .data.search.repositoryCount | color "yellow") ("|" | color "white") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow ("REPO" | color $headerColor) "‚≠ê" "üèÅ" ("LAST COMMIT" | color $headerColor) ("DESCRIPTION" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $stargazerCount := printf "%.0f" .stargazerCount -}}
				{{- if gt .stargazerCount 1000000.0 -}}{{- $stargazerCount = ">1M" -}}
					{{- else if gt .stargazerCount 100000.0 -}}{{- $stargazerCount = printf "%.3sk" $stargazerCount -}}
					{{- else if gt .stargazerCount 10000.0 -}}{{- $stargazerCount = printf "%.2sk" $stargazerCount -}}
					{{- else if gt .stargazerCount 1000.0 -}}{{- $stargazerCount = printf "%.1sk" $stargazerCount -}}
					{{- else if eq .stargazerCount 0.0 -}}{{- $stargazerCount = "" -}}
				{{- end -}}
			{{- $stargazerColor := "yellow" -}}
				{{- if .viewerHasStarred }}{{ $stargazerColor = "011+h:094" }}{{ end -}}
			{{- $langName := "" -}}
				{{- if .primaryLanguage }}{{ $langName = .primaryLanguage.name }}{{ end -}}
			{{- if eq $langName "JavaScript" }}{{- $langName = "ÓûÅ" -}}
				{{- else if eq $langName "Python" }}{{- $langName = "Ô†ü" -}}
			{{ end -}}
			{{- $time := "" -}}{{- /* NOTE: Possible a repo has no commits, have an conditional around the timeago function to be safe against nil condition. */ -}}
				{{- range .defaultBranchRef.target.history.nodes -}}
					{{- if .committedDate -}}{{- $time = (timeago .committedDate) -}}{{- end -}}
				{{- end -}}
			{{- tablerow (printf "%s%s%s" (.owner.login | color "cyan+h") ("/" | color "gray+h") (.name | color "cyan+hb")) ($stargazerCount | color $stargazerColor) ($langName | color "green") ($time | color "gray+h") .description -}}
		{{- end -}}\''

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="$GH_SEARCH_COMMAND --raw-field filter=$INITIAL_QUERY --cache $CACHE_TIME" \
		_fzf_basic_options \
		--disabled \
		--prompt "Search Ôêà repos > " \
		--header-lines 3 \
		--preview "gh repo view {1}" --preview-window wrap:"$PREVIEW_WINDOW_VISIBILITY" \
		--query "$INITIAL_QUERY" --exact \
		--bind "change:first+reload-sync:$GH_SEARCH_COMMAND --raw-field filter={q} --cache $CACHE_TIME || true" \
		--bind "?:toggle-preview+change-preview:echo '$(help_search_function)'" \
		--bind 'tab:toggle-preview+change-preview(gh repo view {1})' \
		--bind "ctrl-b:execute-silent(gh repo view {1} --web)" \
		--bind $'ctrl-f:toggle-preview+change-preview([[ $(gh release list -R {1}) ]] && gh release view -R {1})' \
		--bind "ctrl-r:reload-sync:$GH_SEARCH_COMMAND --raw-field filter={q} || true" \
		--bind "ctrl-t:execute-silent(gh api --method PUT /user/starred/{1})+reload-sync:$GH_SEARCH_COMMAND --raw-field filter={q} --cache 0s || true" \
		--bind "ctrl-u:execute-silent(gh api --method DELETE /user/starred/{1})+reload-sync:$GH_SEARCH_COMMAND --raw-field filter={q} --cache 0s || true" \
		--expect "shift-up,shift-down") || true

	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	output_textline="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $1}')"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	shift-up)
		INITIAL_QUERY=""
		USER_NAME="$(gh api graphql --cache 1h --raw-field query='{viewer{login}}' --jq '.data.viewer.login')"
		fzf_star_function
		;;
	shift-down)
		INITIAL_QUERY=""
		OWNER_REPO_NAME=${output_textline:-"$OWNER_REPO_NAME"}
		if [ -z "$OWNER_REPO_NAME" ]; then
			OWNER_REPO_NAME="$(gh api graphql --cache 1h --field owner=:owner --field name=:repo --raw-field query=$'query ($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { nameWithOwner }}' --jq '.[].repository.nameWithOwner' 2>/dev/null || echo "cli/cli")"
		fi
		fzf_issue_function 0s
		;;
	esac
}

###################################### STARS
help_star_function() {
	cat <<EOF
${WHITE_BOLD}Usage${COLOR_RESET}
  gh look [ st | star ] [Flags] [Search term]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}<none>${COLOR_RESET}  List your stars (sorted by the time the user set the star)
  ${GREEN_NORMAL}-c    ${COLOR_RESET}  Cache the response, for example "30s", "15m", "1h" (default: 20s)
  ${GREEN_NORMAL}-h    ${COLOR_RESET}  Help
  ${GREEN_NORMAL}-u    ${COLOR_RESET}  List stars of another user
  ${GREEN_NORMAL}-w    ${COLOR_RESET}  Display the preview window upon start (default: hidden)

${WHITE_BOLD}Symbols${COLOR_RESET}
  ‚≠ê  Number of stargazers
  üèÅ  Primary language

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?         ${COLOR_RESET}  Toggle help
  ${GREEN_NORMAL}tab       ${COLOR_RESET}  Preview README
  ${GREEN_NORMAL}shift+tab ${COLOR_RESET}  Change preview window size
  ${GREEN_NORMAL}ctrl+b    ${COLOR_RESET}  Browser
  ${GREEN_NORMAL}ctrl+r    ${COLOR_RESET}  Reload
  ${GREEN_NORMAL}ctrl+f    ${COLOR_RESET}  Preview release infos
  ${GREEN_NORMAL}ctrl+t    ${COLOR_RESET}  Star repo (useful for stars of another user)
  ${GREEN_NORMAL}ctrl+u    ${COLOR_RESET}  Unstar repo
  ${GREEN_NORMAL}ctrl+w/s  ${COLOR_RESET}  Scroll the preview up/down
  ${GREEN_NORMAL}shift+down${COLOR_RESET}  Switch to Search
  ${GREEN_NORMAL}esc       ${COLOR_RESET}  Exit
EOF
}

fzf_star_function() {
	GH_STAR_COMMAND=$'gh api graphql --paginate --raw-field query=\'query($endCursor: String, $USER_NAME:String! ) { user(login:$USER_NAME) { starredRepositories(orderBy: { field: STARRED_AT direction: DESC }, first: 100, after: $endCursor) { totalCount pageInfo { hasNextPage, endCursor } nodes { name owner {login} primaryLanguage {name} stargazerCount viewerHasStarred defaultBranchRef { target { ... on Commit { history(first: 1) { nodes { committedDate }}}}} description }}}}\' --template \'
		{{- tablerow (printf "‚àë %.0f Starred Repos" .data.user.starredRepositories.totalCount | color "yellow+h") ( "|" | color "white") ("? Help ¬∑ esc Quit" | color "blue") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "yellow+b" -}}
			{{- tablerow ("REPO" | color $headerColor) "‚≠ê" "üèÅ" ("LAST COMMIT" | color $headerColor) ("DESCRIPTION" | color $headerColor) -}}
		{{- range .data.user.starredRepositories.nodes -}}
		{{- $stargazerCount := printf "%.0f" .stargazerCount -}}
			{{- if gt .stargazerCount 1000000.0 -}}{{- $stargazerCount = ">1M" -}}
				{{- else if gt .stargazerCount 100000.0 -}}{{- $stargazerCount = printf "%.3sk" $stargazerCount -}}
				{{- else if gt .stargazerCount 10000.0 -}}{{- $stargazerCount = printf "%.2sk" $stargazerCount -}}
				{{- else if gt .stargazerCount 1000.0 -}}{{- $stargazerCount = printf "%.1sk" $stargazerCount -}}
				{{- else if eq .stargazerCount 0.0 -}}{{- $stargazerCount = "" -}}
			{{- end -}}
		{{- $stargazerColor := "yellow" -}}
			{{- if .viewerHasStarred }}{{ $stargazerColor = "011+h:094" }}{{ end -}}
		{{- $langName := "" -}}
			{{- if .primaryLanguage }}{{ $langName = .primaryLanguage.name }}{{ end -}}
			{{- if eq $langName "JavaScript" }}{{- $langName = "ÓûÅ" -}}
				{{- else if eq $langName "Python" }}{{- $langName = "Ô†ü" -}}
			{{ end -}}
		{{- $time := "" -}}{{- /* NOTE: Possible a repo has no commits, have an conditional around the timeago function to be safe against nil condition. */ -}}
			{{- range .defaultBranchRef.target.history.nodes -}}
				{{- if .committedDate -}}{{- $time = (timeago .committedDate) -}}{{- end -}}
			{{- end -}}
		{{- tablerow (printf "%s%s%s" (.owner.login | color "cyan+h") ("/" | color "gray+h") (.name | color "cyan+hb")) ($stargazerCount | color $stargazerColor) ($langName | color "green") ($time | color "gray+h") .description -}}
		{{- end -}}\''

	OUTPUT_SELECTION=$(FZF_DEFAULT_COMMAND="$GH_STAR_COMMAND --raw-field USER_NAME=$USER_NAME --cache $CACHE_TIME" \
		_fzf_basic_options --nth 1,3,7.. \
		--prompt $'\e[1;93mSearch Ôêà stars'" [$USER_NAME] > " --header-lines 3 \
		--preview "gh repo view {1}" --preview-window wrap:"$PREVIEW_WINDOW_VISIBILITY" \
		--query "$INITIAL_QUERY" --exact \
		--bind "?:toggle-preview+change-preview:echo '$(help_star_function)'" \
		--bind 'tab:toggle-preview+change-preview(gh repo view {1})' \
		--bind "ctrl-b:execute-silent(gh repo view {1} --web)" \
		--bind $'ctrl-f:toggle-preview+change-preview([[ $(gh release list -R {1}) ]] && gh release view -R {1})' \
		--bind "ctrl-r:reload-sync:$GH_STAR_COMMAND --raw-field USER_NAME=$USER_NAME --cache 0s" \
		--bind "ctrl-t:execute-silent(gh api --method PUT user/starred/{1})+reload-sync:$GH_STAR_COMMAND --raw-field USER_NAME=$USER_NAME --cache 0s" \
		--bind "ctrl-u:execute-silent(gh api --method DELETE user/starred/{1})+reload-sync:$GH_STAR_COMMAND --raw-field USER_NAME=$USER_NAME --cache 0s" \
		--expect "shift-down") || true

	expected_key="$(sed '1d;3d' <<<"$OUTPUT_SELECTION")"
	output_textline="$(sed '1d;2d' <<<"$OUTPUT_SELECTION" | awk '{print $1}')"
	# reset the variable
	OUTPUT_SELECTION=""
	case "$expected_key" in
	shift-down)
		INITIAL_QUERY=""
		OWNER_REPO_NAME="$output_textline"
		fzf_search_function
		;;
	esac
}

# <------------------- SCRIPT -------------------- >

if [ $# = 0 ]; then
	_die_with_octocat "Invalid command:" "$(help_general_function)"
else
	############# Check needed programs installed #############
	if ! command -v bat >/dev/null; then
		_die_with_octocat "Bat was not found." "https://github.com/sharkdp/bat"
	fi
	if ! command -v fzf >/dev/null; then
		_die_with_octocat "Fuzzy finder (fzf) was not found." "https://github.com/junegunn/fzf"
	fi
	USER_FZF_VERSION="$(fzf --version | awk '{print $1}')"
	if [ "$(_version_number $MIN_FZF_VERSION)" -gt "$(_version_number "$USER_FZF_VERSION")" ]; then
		_die_with_octocat "Minimum required \`fzf\` version is: $MIN_FZF_VERSION (found: $USER_FZF_VERSION)"
	fi

	############# Check needed scratch file exits and writeable #############
	# The purpose of this file is to signal to the fzf which search mode is active and remember the last one.
	# This allows switching between "Open" and "All issues/ prs" and active search within the selected category.
	SCRATCH_FILE="${BASH_SOURCE%/*}/.trashme"
	if [ ! -e "$SCRATCH_FILE" ]; then
		touch "$SCRATCH_FILE" 2>/dev/null || echo "Not allowed creating $SCRATCH_FILE"
	fi
	if [ ! -w "$SCRATCH_FILE" ]; then
		_die_with_octocat "Not allowed writing to: $SCRATCH_FILE"
	fi
fi

while [ $# -gt 0 ]; do
	COMMAND_ARG="$1"
	case "$COMMAND_ARG" in
	i | issue | p | pr)
		shift
		while getopts :c:eho:r:w flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					_die_with_octocat "Invalid cache time: $OPTARG"
				fi
				;;
			e) REACTION_EMOJI="$(_emoji_picker)" ;;
			h)
				grep -Eq "i|issue" <<<"$COMMAND_ARG" && help_issue_function
				grep -Eq "p|pr" <<<"$COMMAND_ARG" && help_pr_function
				exit 0
				;;
			o)
				if [[ "$OPTARG" =~ ^[A-Za-z-]{7,}$ ]]; then
					SORTING_ORDER="sort:$OPTARG"
				else
					_die_with_octocat "Invalid sort order: $OPTARG" "Check the readme or this link: https://docs.github.com/en/search-github/searching-on-github"
				fi
				;;
			r)
				# local syntax test first to fail fast, and then gh api test
				# curl is faster, but unauthenticated API requests to GitHub are capped at 60 per hour. Authenticated API requests 5000 per hour.
				if [[ "$OPTARG" =~ ^[^:/]+/[^:/]+$ ]]; then
					OWNER_REPO_NAME="$OPTARG"
				else
					_die_with_octocat "Respect the syntax: gh look {issue,pr} -R OWNER/REPO"
				fi
				if ! gh api --silent repos/"$OWNER_REPO_NAME" 2>/dev/null; then
					_die_with_octocat "No GitHub repo called: $OWNER_REPO_NAME"
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				grep -Eq "i|issue" <<<"$COMMAND_ARG" && _die_with_octocat "Invalid command:" "$(help_issue_function)"
				grep -Eq "p|pr" <<<"$COMMAND_ARG" && _die_with_octocat "Invalid command:" "$(help_pr_function)"
				;;
			esac
		done
		# shift all processed options away, all that's left "$*" are non-options (aka mass-arguments/operands)
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		if [ -z "$OWNER_REPO_NAME" ]; then
			# if the OWNER_REPO_NAME is not set yet, check if the repo has a remote and assign the variable
			git ls-remote --get-url >/dev/null 2>&1 || _die_with_octocat "No remote git repo found"
			# local alternative, but requires Perl-compatible regular expressions (PCREs)
			# git remote -v | grep -m 1 -oP '(?<=\:).+(?=\.)'
			OWNER_REPO_NAME="$(gh api graphql --cache 1h --field owner=:owner --field name=:repo --raw-field query=$'query ($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { nameWithOwner }}' --jq '.[].repository.nameWithOwner')"
		fi

		grep -Eq "i|issue" <<<"$COMMAND_ARG" && fzf_issue_function
		grep -Eq "p|pr" <<<"$COMMAND_ARG" && fzf_pr_function
		break
		;;
	r | run)
		shift
		while getopts "hn:pr:u:w" option; do
			case "$option" in
			h)
				help_workflow_run_function
				exit 0
				;;
			n) NUMBER_WORKFLOW_RUN_LIST=${OPTARG} ;;
			p) EXCLUDE_PULL_REQUESTS=false ;;
			r)
				if [[ "$OPTARG" =~ ^[^:/]+/[^:/]+$ ]]; then
					OWNER_REPO_NAME="$OPTARG"
				else
					_die_with_octocat "Respect the syntax: gh look {issue,pr} -R OWNER/REPO"
				fi
				if ! gh api --silent repos/"$OWNER_REPO_NAME" 2>/dev/null; then
					_die_with_octocat "No GitHub repo called: $OWNER_REPO_NAME"
				fi
				;;
			u)
				if [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
					UPDATE_TIME=${OPTARG}
				else
					_die_with_octocat "Invalid update time: $OPTARG"
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				_die_with_octocat "Invalid command:" "$(help_workflow_run_function)"
				;;
			esac
		done
		shift "$((OPTIND - 1))"
		test=$(gh repo set-default --view "$(git config --get remote.origin | cut -d: -f2 | cut -d. -f1)" 2>/dev/null || true)
		# "set-default --view" always returns a zero exit value, the workaround is to test for any spaces in the string
		[[ -z ${OWNER_REPO_NAME} ]] && [[ ! $test =~ \  ]] && OWNER_REPO_NAME="$test"

		if [[ -z ${OWNER_REPO_NAME} ]]; then
			remote_choice="$(git remote -v | cut -d: -f2 | cut -d. -f1 | sort -u)"
			if [[ -z $remote_choice ]]; then
				_die_with_octocat "No Git remotes found."
			elif [[ $(wc -l <<<"$remote_choice") -eq 1 ]]; then
				OWNER_REPO_NAME="$remote_choice"
			elif [[ $(wc -l <<<"$remote_choice") -gt 1 ]]; then
				OWNER_REPO_NAME="$(_fzf_basic_options <<<"$remote_choice" \
					--header "For which repository would you like to see Workflow Runs ?")"
			fi
		fi
		fzf_workflow_run_function
		break
		;;
	s | search)
		shift
		while getopts :c:hw flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					_die_with_octocat "Invalid cache time: $OPTARG"
				fi
				;;
			h)
				help_search_function
				exit 0
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				_die_with_octocat "Invalid command:" "$(help_search_function)"
				;;
			esac
		done
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		fzf_search_function
		break
		;;
	st | star)
		shift
		while getopts :c:hu:w flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					_die_with_octocat "Invalid cache time: $OPTARG"
				fi
				;;
			h)
				help_star_function
				exit 0
				;;
			u)
				# local syntax test first to fail fast, and then gh api test
				if [[ "$OPTARG" =~ ^[^:/]+$ ]]; then
					USER_NAME="$OPTARG"
				else
					_die_with_octocat "Respect the syntax: gh look star -u USER"
				fi
				# gh api --silent users/... would be shorter, but would result in a false positive for organizations
				if ! gh api graphql --silent --raw-field USER_NAME="$USER_NAME" --raw-field query=$'query ($USER_NAME: String!) { user(login: $USER_NAME) { login }}' 2>/dev/null; then
					_die_with_octocat "No USER called: $USER_NAME"
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				_die_with_octocat "Invalid command:" "$(help_star_function)"
				;;
			esac
		done
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		# if the USER_NAME is not set yet, use your own.
		if [ -z "$USER_NAME" ]; then
			USER_NAME="$(gh api graphql --cache 1h --raw-field query='{viewer{login}}' --jq '.data.viewer.login')"
		fi
		fzf_star_function
		break
		;;
	-h | --help | h | help)
		help_general_function
		break
		;;
	*)
		_die_with_octocat "Invalid command:" "$(help_general_function)"
		;;
	esac
done
