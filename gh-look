#!/bin/bash
set -euo pipefail
# -e : immediately exit if any command has a non-zero exit status.
# -u : program to immediately exit on references for any variable you haven't previously defined
# -o pipefail : any command in a pipeline that fails the return code will be used as the return code of the whole pipeline

############# Helper functions #############

# More ideas: https://raw.githubusercontent.com/sindresorhus/cli-spinners/master/spinners.json
SPIN_FORM=(▰▱▱▱▱▱▱ ▰▰▱▱▱▱▱ ▰▰▰▱▱▱▱ ▰▰▰▰▱▱▱ ▰▰▰▰▰▱▱ ▰▰▰▰▰▰▱ ▰▰▰▰▰▰▰)
# Restarting fzf immediately may not show the newly created changes. Wait at least a second or two.
_load_indicator() {
	printf "\n\n%s\n" "$1"
	for i in "${SPIN_FORM[@]}"; do
		echo -ne "\r$i"
		sleep "$2"
	done
}

# Redefine this function to change the options
# https://github.com/junegunn/fzf-git.sh/blob/main/fzf-git.sh#L104
_fzf_basic_options() {
	GH_FORCE_TTY=100% fzf -- \
		--ansi --layout reverse --info inline --no-multi --height 100% \
		--header '' --ellipsis '' --border horizontal \
		--preview-window "$PREVIEW_WINDOW_VISIBILITY:wrap:right:50%:border-left" "$@"
}

############# Manual #############
HELP_GENERAL='cat <<<"
gh look [Command] [-Flags] [Search term]

Command │ Description
────────│───────────────
issue   │ List Issues
pr      │ List Pull Requests
search  │ Search for GitHub repos
star    │ List starred repositories"'

HELP_ISSUE_SECTION='cat <<<"
gh look issue [-Flags] [Search term]

Flags  │ Description
───────│───────────────
<none> │ List Issues from current directory
-c     │ Cache the response, for example "30s", "15m", "1h" (default: 5m)
-e     │ Emoji to make a reaction (default: THUMBS_UP 👍 )
       │  {CONFUSED,EYES,HEART,HOORAY,LAUGH,THUMBS_DOWN,THUMBS_UP,ROCKET}
-o     │ sorting order of Issues (default: created-desc)
       │  {author-date,committer-date,created,interactions,reactions,updated}-{desc,asc}
-r     │ Specify a repository (form: OWNER/REPO)
-w     │ Display the preview window upon start (default: hidden)

Head  │ Description
──────│───────────────
💬    │ Total number of comments (gray commentable; red locked)
📣    │ Total number of emojis (green reactable; yellow reacted; red locked)

HotKeys     │ Description
────────────│───────────────
<search>    │ https://docs.github.com/en/search-github/searching-on-github
            │  (Example: sort:reactions is:closed involves:@me Autobahn)
?           │ Toggle help
enter       │ See comments
tab         │ Toggle Issue preview
ctrl+a      │ ALL Issues
ctrl+b      │ Browser
ctrl+e      │ Edit an Issue
ctrl+f      │ Fuzzy search
ctrl+g      │ Close Issue after confirmation
ctrl+n      │ New Issue
ctrl+o      │ OPEN Issues only
ctrl+r      │ Reload
ctrl+t      │ React with an Emoji
ctrl+u      │ Undo the Emoji reaction
ctrl+x      │ Write a comment
shift-right │ Switch to Pull Requests
esc         │ Exit"'

_fzf_issue() {
	GH_ISSUE_PREVIEW=$'gh api graphql --paginate --raw-field id={1} --raw-field query=\'query($id: ID!, $endCursor: String){node(id: $id) { ... on Issue { author { login } body createdAt comments(first: 100) { totalCount nodes { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}}}} timelineItems(itemTypes: [CLOSED_EVENT, ISSUE_COMMENT, REOPENED_EVENT], first: 100, after: $endCursor) { nodes { ... on ClosedEvent { actor { login } closer { ... on PullRequest { baseRepository { nameWithOwner } number }} createdAt stateReason } ... on IssueComment { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}} reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }}} ... on ReopenedEvent { actor { login } createdAt stateReason }} pageInfo { hasNextPage endCursor }} labels(first:10) { nodes { name } } number reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }} state title viewerDidAuthor }}}\' --template \'{{- $prefix := .data.node -}}{{- $stateIssueColor := "green+b" -}}{{- if eq $prefix.state "CLOSED" -}}{{- $stateIssueColor = "93+b" -}}{{- end -}}{{- $issueAuthor := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow ($prefix.title | color "white+bh") -}}{{- tablerender -}}{{- tablerow (printf "%s ◉ #%.0f" $prefix.state $prefix.number | color $stateIssueColor) ($issueAuthor | color $authorColor) (printf "│ %s ∙ %.0f Comments │" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") -}}{{- tablerender -}}{{- if $prefix.labels.nodes -}}{{- tablerow ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- tablerender -}}{{- end -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "😕" }}{{ else if eq .content "EYES" }}{{ $emoji = "👀" }}{{ else if eq .content "HEART" }}{{ $emoji = "💖" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "🎉" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "😄" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "👎" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "👍" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "🚀" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("—————————————————————————————"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $bodyText := $prefix.body }}{{ if eq ($bodyText | len) 0 -}}{{- $bodyText = " No description provided. " | color "white+i" -}}{{- end -}}{{- $bodyText -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- range $prefix.timelineItems.nodes -}}{{- $actorTimeline := "[DELETED_USER]" -}}{{- if .actor -}}{{- $actorTimeline = .actor.login -}}{{- end -}}{{- $authorTimelineColor := "cyan+hb" -}}{{- if .viewerDidAuthor -}}{{- $authorTimelineColor = "yellow+bh" -}}{{- end -}}{{- if eq .stateReason "COMPLETED" "NOT_PLANNED" -}}{{- $stateClosedColor := "93+b" -}}{{- if eq .stateReason "NOT_PLANNED" -}}{{- $stateClosedColor = "gray+hb" -}}{{- end -}}{{- $linkedPR := "" -}}{{- if .closer -}}{{- $linkedPR = (printf "%s #%v" .closer.baseRepository.nameWithOwner .closer.number | color "blue+hb") -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s closed this as %s %s %s" ($actorTimeline | color $authorTimelineColor) (.stateReason | color $stateClosedColor) (timeago .createdAt | color "white+bh") $linkedPR) -}}{{- tablerender -}}{{- tablerow  ("◢■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◣"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else if eq .stateReason "REOPENED" -}}{{- $stateReopenedColor := "green+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color $stateReopenedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s %s this Issue %s" ($actorTimeline | color $authorTimelineColor) (.stateReason | color $stateReopenedColor) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("◢■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◣"| color $stateReopenedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else -}}{{- $authorTimeline := "[DELETED_USER]" -}}{{- if .author -}}{{- $authorTimeline = .author.login -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($authorTimeline | color $authorTimelineColor) ( timeago .createdAt | color "white+bh") -}}{{- tablerender -}}{{- range .reactionGroups -}}{{ $emojiInComment := .content }}{{ if eq .content "CONFUSED" }}{{ $emojiInComment = "😕" }}{{ else if eq .content "EYES" }}{{ $emojiInComment = "👀" }}{{ else if eq .content "HEART" }}{{ $emojiInComment = "💖" }}{{ else if eq .content "HOORAY" }}{{ $emojiInComment = "🎉" }}{{ else if eq .content "LAUGH" }}{{ $emojiInComment = "😄" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emojiInComment = "👎" }}{{ else if eq .content "THUMBS_UP" }}{{ $emojiInComment = "👍" }}{{ else if eq .content "ROCKET" }}{{ $emojiInComment = "🚀" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiInCommentGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiInCommentGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiInCommentTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiInCommentTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiInCommentTotal $emojiInComment) $emojiInCommentGiver -}}{{- tablerender -}}{{- end -}}{{- end -}}{{- tablerow  ("‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- .body -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- end -}}{{- end -}}\''

	# fzf allows hiding columns "--with-nth 2...", headers are also affected, so NODE_ID_HIDDEN is included there
	# when columns are hidden the number on GH_FORCE_TTY needs to be increased
	GH_ISSUE_COMMAND=$'gh api graphql --raw-field query=\'query($filter: String!) {search(query: $filter, type: ISSUE, first: 35) {issueCount nodes { ... on Issue { author { login } comments {totalCount} id number updatedAt reactions { totalCount viewerHasReacted } state title viewerCanReact viewerDidAuthor }}}}\' --template \'
		{{- $limitCount := .data.search.issueCount -}}
			{{- if gt .data.search.issueCount 35.0 -}}{{- $limitCount = 35.0 -}}{{- end -}}
		{{- tablerow "NODE_ID_HIDDEN" (printf "%.0f of ∑ %.0f" $limitCount .data.search.issueCount | color "blue+b") ("|" | color "white+d") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+bd" -}}
			{{- tablerow "NODE_ID_HIDDEN" ("ISSUE" | color $headerColor) ("AUTHOR" | color $headerColor) ("LAST UPDATE" | color $headerColor) "💬" "📣" ("TITLE" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $stateIssueColor := "green" -}}
				{{- if eq .state "CLOSED" -}}{{- $stateIssueColor = "93" -}}{{- end -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $commentCount := "\u00a0" -}}{{- /* NOTE: U+00a0 (non-breaking space) for entries without comments, which the viewer can comment on. Needed to make a if decision with fzf later in the script. */ -}}
				{{- if not .viewerCanReact -}}{{- $commentCount = (or (printf "%.0f" .comments.totalCount) "0")  -}}
					{{- else if .comments.totalCount -}}{{- $commentCount = printf "%.0f" .comments.totalCount -}}
				{{- end -}}
			{{- $commentColor := "white+bd" -}}
				{{- if not .viewerCanReact -}}{{- $commentColor = "red+bd" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id (printf "#%.0f" .number | color $stateIssueColor) ($author | color $authorColor) (timeago .updatedAt) ($commentCount | color $commentColor) ($emojiCount | color $emojiColor) .title -}}
		{{- end -}}\''

	INITIAL_ISSUE_PROMPT=$(grep -q A <"$SCRATCH_FILE" && printf "Issues ◉ [%s] > " "$OWNER_REPO_NAME" || printf "\e[1;92mOPEN Issues ◉ [%s] > " "$OWNER_REPO_NAME")

	ISSUE_OUTPUT=$(FZF_DEFAULT_COMMAND="(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME $INITIAL_QUERY \" || $GH_ISSUE_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open $INITIAL_QUERY \") || true" \
		_fzf_basic_options --disabled --header-lines 3 --with-nth 2.. \
		--prompt "$INITIAL_ISSUE_PROMPT" \
		--query "$INITIAL_QUERY" --preview "sleep 0.35; $GH_ISSUE_PREVIEW | $BAT_OR_CAT" \
		--bind "change:first+reload:sleep 0.25; (grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "?:toggle-preview+change-preview:$HELP_ISSUE_SECTION" \
		--bind "tab:toggle-preview+change-preview:sleep 0.35; $GH_ISSUE_PREVIEW | $BAT_OR_CAT" \
		--bind "ctrl-a:rebind(change)+change-prompt(Issues ◉ [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo A >$SCRATCH_FILE)+reload:$GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || true" \
		--bind "ctrl-b:execute-silent(gh issue view {2} --web --repo $OWNER_REPO_NAME)" \
		--bind $'ctrl-f:unbind(change)+enable-search+clear-query+change-prompt(\e[1;93mFUZZY SEARCH'" [$OWNER_REPO_NAME] > )" \
		--bind $'ctrl-o:rebind(change)+change-prompt(\e[1;92mOPEN Issues ◉'" [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo B >$SCRATCH_FILE)+reload:$GH_ISSUE_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q} || true" \
		--bind "ctrl-r:reload:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:(grep -q A <$SCRATCH_FILE && $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME \"{q} || $GH_ISSUE_COMMAND --raw-field filter=\"$SORTING_ORDER type:issue repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--expect "ctrl-e,ctrl-g,ctrl-n,ctrl-x,enter,shift-right")

	ISSUE_NUMBER=$(sed 1d <<<"${ISSUE_OUTPUT}" | awk '{print $2}' | tr -d "#")
	case $(sed 1q <<<"${ISSUE_OUTPUT}") in
	ctrl-e)
		gh issue edit "$ISSUE_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_issue 0s
		;;
	ctrl-g)
		printf "\n%s\n\nCONFIRM CLOSURE (Y/n) " "$(sed 1d <<<"${ISSUE_OUTPUT}" | awk '{$1=""; print $0}')"
		stty raw -echo
		CONFIRM=$(dd bs=1 count=1 2>/dev/null)
		stty sane
		if [[ "$CONFIRM" = "y" ]]; then
			printf "\n\nDo you want to add a comment??? (Y/n) "
			stty raw -echo
			CONFIRM=$(dd bs=1 count=1 2>/dev/null)
			stty sane
			if [[ "$CONFIRM" = "y" ]]; then
				read -rp "Enter a comment: " MESSAGE
				gh issue close "$ISSUE_NUMBER" --repo "$OWNER_REPO_NAME" --comment "$MESSAGE" 2>/dev/null && printf "\n🟢 Success.... Issue closed\n" || printf "\n🛑 Missing permissions to close this Issue. !!!\n"
			else
				gh issue close "$ISSUE_NUMBER" --repo "$OWNER_REPO_NAME" 2>/dev/null && printf "\n🟢 Success.... Issue closed\n" || printf "\n🛑 Missing permissions to close this Issue. !!!\n"
			fi
			_load_indicator "Restarting ..." 0.25
			_fzf_issue 0s
		else
			printf "\nDiscarding... Issue was not closed !!!"
			_load_indicator "Restarting ..." 0.25
			_fzf_issue
		fi
		;;
	ctrl-n)
		gh issue create --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_issue 0s
		;;
	ctrl-x)
		gh issue comment "$ISSUE_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_issue 0s
		;;
	enter) _fzf_issue_comment ;;
	shift-right)
		_fzf_pr
		;;
	esac
}
_fzf_issue_comment() {
	if ! sed 1d <<<"${ISSUE_OUTPUT}" | awk '{print $6,$7}' | grep -Eqw '[0-9]+'; then
		# adding U+00a0 (non-breaking space) for isues with zero comments and commentable
		# without it an issue with 0 comments and >1 reaction would trick the if check
		# sometimes the "age" column can only be 2 words instead of 3, e.g. "just now", that is why $6 and $7
		_load_indicator $'No comments on this issue\nRestarting ...' 0.45
		_fzf_issue
	fi
	HELP_ISSUE_COMMENT_SECTION='cat <<<"
Head │ Description
─────│───────────────
📣   │ Total number of emojis (green reactable; yellow reacted; red locked)

HotKeys  │ Description
─────────│───────────────
?        │ Toggle help
tab      │ Toggle comment preview
ctrl+b   │ Browser
ctrl+n   │ New Issue
ctrl+t   │ React with an Emoji
ctrl+u   │ Undo the Emoji reaction
ctrl+x   │ Write a comment
ctrl+z   │ Delete the comment after confirmation
esc      │ Return to Issue list"'

	GH_ISSUE_COMMENTS_COMMAND=$'gh api graphql --paginate --raw-field query=\'query ($owner: String!, $name: String!, $number: Int!, $endCursor: String) { repository(owner: $owner, name: $name) { issue(number: $number) { author { login } createdAt labels(first:10) { nodes { name } } number state title comments(first: 100, after: $endCursor) { totalCount nodes { author { login } body createdAt databaseId id reactions { totalCount viewerHasReacted } viewerCanReact viewerDidAuthor } pageInfo { endCursor hasNextPage }}}}}\' --template \'
		{{- $prefix := .data.repository.issue -}}
		{{- $stateIssueCommentColor := "green" -}}
			{{- if eq $prefix.state "CLOSED" -}}{{- $stateIssueCommentColor = "93" -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ($prefix.title | color "white+bh") -}}{{- tablerender -}}
		{{- $issueAuthor := "[DELETED_USER]" -}}
			{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" (printf "%s ◉ #%.0f" $prefix.state $prefix.number | color $stateIssueCommentColor) ($issueAuthor | color "cyan+hb") (printf "│ %s ∙ %.0f Comments │" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
			{{- if $prefix.labels.nodes -}}{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- else -}}{{- tablerow "" -}}{{- end -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————" | color "gray+d") -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+bd" -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("COMMENTER" | color $headerColor) ("AGE" | color $headerColor) "📣" ("COMMENT" | color $headerColor) -}}
		{{- range $prefix.comments.nodes -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id .databaseId ($author | color $authorColor) (timeago .createdAt) ($emojiCount | color $emojiColor) .body -}}
		{{- end -}}\''

	ISSUE_COMMENT_OUTPUT=$(FZF_DEFAULT_COMMAND="$GH_ISSUE_COMMENTS_COMMAND --cache ${1:-$CACHE_TIME} --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$ISSUE_NUMBER" \
		_fzf_basic_options --header-lines 6 --with-nth 3.. \
		--prompt $'\e[1;94m'"Issue 💬 [$OWNER_REPO_NAME] > " \
		--preview-window "+5:~5" --preview "$GH_COMMENTS_PREVIEW | $BAT_OR_CAT" \
		--bind "?:toggle-preview+change-preview:$HELP_ISSUE_COMMENT_SECTION" \
		--bind "tab:toggle-preview+change-preview:$GH_COMMENTS_PREVIEW | $BAT_OR_CAT" \
		--bind "ctrl-b:execute-silent(open https://github.com/$OWNER_REPO_NAME/issues/$ISSUE_NUMBER#issuecomment-{2})" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:$GH_ISSUE_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$ISSUE_NUMBER || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:$GH_ISSUE_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$ISSUE_NUMBER || true" \
		--expect "ctrl-n,ctrl-x,ctrl-z,esc")

	case $(sed 1q <<<"${ISSUE_COMMENT_OUTPUT}") in
	ctrl-n)
		gh issue create --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_issue 0s
		;;
	ctrl-x)
		gh issue comment "$ISSUE_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_issue_comment 0s
		;;
	ctrl-z)
		printf "\n%s\n\nCONFIRM DELETION (Y/n) " "$(sed 1d <<<"${ISSUE_COMMENT_OUTPUT}" | awk '{$1=$2=""; print $0}')"
		stty raw -echo
		CONFIRM=$(dd bs=1 count=1 2>/dev/null)
		stty sane
		if [[ "$CONFIRM" = "y" ]]; then
			gh api graphql --silent --raw-field id="$(sed 1d <<<"${ISSUE_COMMENT_OUTPUT}" | awk '{print $1}')" --raw-field query=$'mutation($id: ID!) { deleteIssueComment(input: {id: $id}) { clientMutationId }}' 2>/dev/null && printf "\n🟢 Success.... comment deleted\n" || printf "\n🛑 Missing permissions to delete this comment. !!!\n"
			_load_indicator "Restarting ..." 0.25
			_fzf_issue 0s
		else
			printf "\nDiscarding... comment was not delted !!!"
			_load_indicator "Restarting ..." 0.25
			_fzf_issue_comment
		fi
		;;
	esc) _fzf_issue ;;
	esac
}

###################################### PULL REQUEST (PR)

HELP_PR_SECTION='cat <<<"
gh look pr [-Flags] [Search term]

Flags  │ Description
───────│───────────────
<none> │ List Pull Requests from current directory
-c     │ Cache the response, for example "30s", "15m", "1h" (default: 5m)
-e     │ Emoji to make a reaction (default: THUMBS_UP 👍 )
       │  {CONFUSED,EYES,HEART,HOORAY,LAUGH,THUMBS_DOWN,THUMBS_UP,ROCKET}
-o     │ sorting order of Pull Requests (default: created-desc)
       │  {author-date,committer-date,created,interactions,reactions,updated}-{desc,asc}
-r     │ Specify a repo (form: OWNER/REPO)
-w     │ Display the preview window upon start (default: hidden)

Head  │ Description
──────│───────────────
💬    │ Total number of comments (gray commentable; red locked)
📣    │ Total number of emojis (green reactable; yellow reacted; red locked)
+     │ Additions
-     │ Deletions

HotKeys    │ Description
───────────│───────────────
<search>   │ https://docs.github.com/en/search-github/searching-on-github
           │  (Example: sort:reactions is:closed involves:@me Autobahn)
?          │ Toggle help
enter      │ See comments
tab        │ Toggle Pull Request preview
ctrl+a     │ ALL Pull Requests
ctrl+b     │ Browser
ctrl+d     │ Toggle diff
ctrl+e     │ Edit a Pull Request
ctrl+f     │ Fuzzy search
ctrl+g     │ Merge a Pull Request
ctrl+o     │ OPEN Pull Requests only
ctrl+r     │ Reload
ctrl+t     │ React with an Emoji
ctrl+u     │ Undo the Emoji reaction
ctrl+x     │ Write a comment
ctrl+y     │ Checkout
shift-left │ Switch to Issues
esc        │ Exit"'

_fzf_pr() {
	GH_PR_PREVIEW=$'gh api graphql --paginate --raw-field id={1} --raw-field query=\'query($id: ID!, $endCursor: String){node(id: $id) {... on PullRequest { author { login } body createdAt comments(first: 100) { totalCount nodes { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}}}} timelineItems(itemTypes: [CLOSED_EVENT, MERGED_EVENT, ISSUE_COMMENT], first: 100, after: $endCursor) { nodes { ... on ClosedEvent { actor { login } createdAt stateReason } ... on IssueComment { author { login } body createdAt viewerDidAuthor reactionGroups { content reactors(last: 4) { totalCount nodes { ... on User { login }}}} reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }}} ... on MergedEvent { actor { login } createdAt mergeRef { repository { name } name } commit { abbreviatedOid }}} pageInfo { hasNextPage endCursor }} labels(first:10) { nodes { name } } number reactionGroups { content viewerHasReacted reactors(last: 4) { nodes { ... on User { login }} totalCount }} state title viewerDidAuthor }}}\' --template \'{{- $prefix := .data.node -}}{{- $statePRColor := "green+b" -}}{{- if eq $prefix.state "CLOSED" -}}{{- $statePRColor = "red+b" -}}{{- else if eq $prefix.state "MERGED" -}}{{- $statePRColor = "magenta+b" -}}{{- end -}}{{- $issueAuthor := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $issueAuthor = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow ($prefix.title | color "white+bh") -}}{{- tablerender -}}{{- tablerow (printf "%s  #%.0f" $prefix.state $prefix.number | color $statePRColor) ($issueAuthor | color $authorColor) (printf "│ %s ∙ %.0f Comments │" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") -}}{{- tablerender -}}{{- if $prefix.labels.nodes -}}{{- tablerow ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- tablerender -}}{{- end -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "😕" }}{{ else if eq .content "EYES" }}{{ $emoji = "👀" }}{{ else if eq .content "HEART" }}{{ $emoji = "💖" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "🎉" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "😄" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "👎" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "👍" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "🚀" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("—————————————————————————————"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $bodyText := $prefix.body }}{{ if eq ($bodyText | len) 0 -}}{{- $bodyText = " No description provided. " | color "white+i" -}}{{- end -}}{{- $bodyText -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- range $prefix.timelineItems.nodes -}}{{- $actorTimeline := "[DELETED_USER]" -}}{{- if .actor -}}{{- $actorTimeline = .actor.login -}}{{- end -}}{{- $authorTimelineColor := "cyan+hb" -}}{{- if .viewerDidAuthor -}}{{- $authorTimelineColor = "yellow+bh" -}}{{- end -}}{{- if .mergeRef -}}{{- $stateMergedColor := "93+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color $stateMergedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s merged %s into %s %s" ($actorTimeline | color $authorTimelineColor) (.commit.abbreviatedOid | color $stateMergedColor) (printf "%s:%s" .mergeRef.repository.name .mergeRef.name) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("◢■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◣"| color $stateMergedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else if eq .stateReason "COMPLETED" -}}{{- $stateClosedColor := "red+b" -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow (printf "%s closed this %s" ($actorTimeline | color $authorTimelineColor) (timeago .createdAt | color "white+bh")) -}}{{- tablerender -}}{{- tablerow  ("◢■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◣"| color $stateClosedColor) -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- else -}}{{- $authorTimeline := "[DELETED_USER]" -}}{{- if .author -}}{{- $authorTimeline = .author.login -}}{{- end -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($authorTimeline | color $authorTimelineColor) ( timeago .createdAt | color "white+bh") -}}{{- tablerender -}}{{- range .reactionGroups -}}{{ $emojiInComment := .content }}{{ if eq .content "CONFUSED" }}{{ $emojiInComment = "😕" }}{{ else if eq .content "EYES" }}{{ $emojiInComment = "👀" }}{{ else if eq .content "HEART" }}{{ $emojiInComment = "💖" }}{{ else if eq .content "HOORAY" }}{{ $emojiInComment = "🎉" }}{{ else if eq .content "LAUGH" }}{{ $emojiInComment = "😄" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emojiInComment = "👎" }}{{ else if eq .content "THUMBS_UP" }}{{ $emojiInComment = "👍" }}{{ else if eq .content "ROCKET" }}{{ $emojiInComment = "🚀" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiInCommentGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiInCommentGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiInCommentTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiInCommentTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiInCommentTotal $emojiInComment) $emojiInCommentGiver -}}{{- tablerender -}}{{- end -}}{{- end -}}{{- tablerow  ("‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- .body -}}{{- tablerow "" -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- end -}}{{- end -}}\''

	# fzf allows hiding columns "--with-nth 2...", headers are also affected, so NODE_ID_HIDDEN is included there
	# when columns are hidden the number on GH_FORCE_TTY needs to be increased
	GH_PR_COMMAND=$'gh api graphql --raw-field query=\'query($filter: String!) {search(query: $filter, type: ISSUE, first: 35) {issueCount nodes { ... on PullRequest { additions author { login } comments {totalCount} deletions id number updatedAt reactions { totalCount viewerHasReacted } state title viewerCanReact viewerDidAuthor }}}}\' --template \'
		{{- $limitCount := .data.search.issueCount -}}
			{{- if gt .data.search.issueCount 35.0 -}}{{- $limitCount = 35.0 -}}{{- end -}}
		{{- tablerow "NODE_ID_HIDDEN" (printf "%.0f of ∑ %.0f" $limitCount .data.search.issueCount | color "blue+b") ("|" | color "white+d") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+bd" -}}
			{{- tablerow "NODE_ID_HIDDEN" ("PR" | color $headerColor) ("AUTHOR" | color $headerColor) ("LAST UPDATE" | color $headerColor) "💬" "📣" ("+" | color "green+bd") ("-" | color "red+bd") ("TITLE" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $statePullRequestColor := "green" -}}
				{{- if eq .state "CLOSED" }}{{ $statePullRequestColor = "red" }}{{- else if eq .state "MERGED" }}{{ $statePullRequestColor = "magenta" }}{{ end -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $commentCount := "\u00a0" -}}{{- /* NOTE: U+00a0 (non-breaking space) for entries without comments, which the viewer can comment on. Needed to make a if decision with fzf later in the script. */ -}}
				{{- if not .viewerCanReact -}}{{- $commentCount = (or (printf "%.0f" .comments.totalCount) "0")  -}}
					{{- else if .comments.totalCount -}}{{- $commentCount = printf "%.0f" .comments.totalCount -}}
				{{- end -}}
			{{- $commentColor := "white+bd" -}}
				{{- if not .viewerCanReact -}}{{- $commentColor = "red+bd" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id (printf "#%.0f" .number | color $statePullRequestColor) ($author | color $authorColor) (timeago .updatedAt) ($commentCount | color $commentColor) ($emojiCount | color $emojiColor) (printf "+%.0f" .additions | color "green") (printf "-%.0f" .deletions | color "red") .title -}}
		{{- end -}}\''

	INITIAL_PR_PROMPT=$(grep -q A <"$SCRATCH_FILE" && printf "Pull Requests  [%s] > " "$OWNER_REPO_NAME" || printf "\e[1;92mOPEN Pull Requests  [%s] > " "$OWNER_REPO_NAME")

	PR_OUTPUT=$(FZF_DEFAULT_COMMAND="(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME $INITIAL_QUERY \" || $GH_PR_COMMAND --cache ${1:-$CACHE_TIME} --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open $INITIAL_QUERY \") || true" \
		_fzf_basic_options --disabled --header-lines 3 --with-nth 2.. \
		--prompt "$INITIAL_PR_PROMPT" \
		--query "$INITIAL_QUERY" --preview "sleep 0.35; $GH_PR_PREVIEW | $BAT_OR_CAT" \
		--bind "change:first+reload:sleep 0.25; (grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "?:toggle-preview+change-preview:$HELP_PR_SECTION" \
		--bind "tab:toggle-preview+change-preview:sleep 0.35; $GH_PR_PREVIEW | $BAT_OR_CAT" \
		--bind "ctrl-a:rebind(change)+change-prompt(Pull Requests  [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo A >$SCRATCH_FILE)+reload:$GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || true" \
		--bind "ctrl-b:execute-silent(gh pr view {2} --web --repo $OWNER_REPO_NAME)" \
		--bind $'ctrl-f:unbind(change)+enable-search+clear-query+change-prompt(\e[1;93mFUZZY SEARCH'" [$OWNER_REPO_NAME] > )" \
		--bind "ctrl-d:toggle-preview+change-preview(gh pr diff {2} --repo $OWNER_REPO_NAME"$' | if type delta &>/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi)' \
		--bind $'ctrl-o:rebind(change)+change-prompt(\e[1;92mOPEN Pull Requests '" [$OWNER_REPO_NAME] > )+disable-search+execute-silent(echo B >$SCRATCH_FILE)+reload:$GH_PR_COMMAND --cache $CACHE_TIME --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q} || true" \
		--bind "ctrl-r:reload:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:(grep -q A <$SCRATCH_FILE && $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME \"{q} || $GH_PR_COMMAND --raw-field filter=\"$SORTING_ORDER type:pr repo:$OWNER_REPO_NAME state:open \"{q}) || true" \
		--expect "ctrl-e,ctrl-g,ctrl-x,ctrl-y,enter,shift-left")

	PR_NUMBER=$(sed 1d <<<"${PR_OUTPUT}" | awk '{print $2}' | tr -d "#")
	case $(sed 1q <<<"${PR_OUTPUT}") in
	ctrl-e)
		gh pr edit "$PR_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_pr 0s
		;;
	ctrl-g)
		gh pr merge "$PR_NUMBER" --repo "$OWNER_REPO_NAME"
		exit 0
		;;
	ctrl-x)
		gh pr comment "$PR_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_pr 0s
		;;
	ctrl-y)
		gh pr checkout "$PR_NUMBER" --repo "$OWNER_REPO_NAME"
		exit 0
		;;
	enter) _fzf_pr_comment ;;
	shift-left)
		_fzf_issue
		;;
	esac
}
_fzf_pr_comment() {
	if ! sed 1d <<<"${PR_OUTPUT}" | awk '{print $6,$7}' | grep -Eqw '[0-9]+'; then
		_load_indicator $'No comments on this Pull Request\nRestarting ...' 0.45
		_fzf_pr
	fi
	HELP_PR_COMMENT_SECTION='cat <<<"
Head │ Description
─────│───────────────
📣   │ Total number of emojis (green reactable; yellow reacted; red locked)

HotKeys  │ Description
─────────│───────────────
?        │ Toggle help
tab      │ Toggle comment preview
ctrl+b   │ Browser
ctrl+d   │ Toggle diff
ctrl+t   │ React with an Emoji
ctrl+u   │ Undo the Emoji reaction
ctrl+x   │ Write a comment
esc      │ Return to Pull Request list"'

	GH_PR_COMMENTS_COMMAND=$'gh api graphql --paginate --raw-field query=\'query ($owner: String!, $name: String!, $number: Int!, $endCursor: String) { repository(owner: $owner, name: $name) { pullRequest(number: $number) { author { login } createdAt labels(first:10) { nodes { name } } number state title comments(first: 100, after: $endCursor) { totalCount nodes { author { login } body createdAt databaseId id reactions { totalCount viewerHasReacted } viewerCanReact viewerDidAuthor } pageInfo { endCursor hasNextPage }}}}}\' --template \'
		{{- $prefix := .data.repository.pullRequest -}}
		{{- $statePullRequestCommentColor := "green" -}}
			{{- if eq $prefix.state "CLOSED" -}}{{- $statePullRequestCommentColor = "red+b" -}}{{- else if eq $prefix.state "MERGED" }}{{- $statePullRequestCommentColor = "magenta+b" -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ($prefix.title | color "white+bh") -}}{{- tablerender -}}
		{{- $pullRequestAuthor := "[DELETED_USER]" -}}
			{{- if $prefix.author -}}{{- $pullRequestAuthor = $prefix.author.login -}}{{- end -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" (printf "%s  #%.0f" $prefix.state $prefix.number | color $statePullRequestCommentColor) ($pullRequestAuthor | color "cyan+hb") (printf "│ %s ∙ %.0f Comments │" (timeago $prefix.createdAt) $prefix.comments.totalCount | color "gray+h") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
			{{- if $prefix.labels.nodes -}}{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("Labels:" | color "white+b") (pluck "name" $prefix.labels.nodes | join ", " | printf "[ %s ]" | color "white") -}}{{- else -}}{{- tablerow "" -}}{{- end -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————" | color "gray+d") -}}{{- tablerender -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+bd" -}}
			{{- tablerow "NODE_ID_HIDDEN" "DATABASE_ID_HIDDEN" ("COMMENTER" | color $headerColor) ("AGE" | color $headerColor) "📣" ("COMMENT" | color $headerColor) -}}
		{{- range $prefix.comments.nodes -}}
			{{- $author := "[DELETED_USER]" -}}
				{{- if .author -}}{{- $author = .author.login -}}{{- end -}}
			{{- $authorColor := "cyan+h" -}}
				{{- if .viewerDidAuthor -}}{{- $authorColor = "yellow" -}}{{- end -}}
			{{- $emojiCount := "" -}}
				{{- if not .viewerCanReact -}}{{- $emojiCount = (or (printf "%.0f" .reactions.totalCount) "0")  -}}
					{{- else if .reactions.totalCount -}}{{- $emojiCount = printf "%.0f" .reactions.totalCount -}}
				{{- end -}}
			{{- $emojiColor := "green+bd" -}}
				{{- if not .viewerCanReact -}}{{- $emojiColor = "red+bd" -}}
					{{- else if .reactions.viewerHasReacted -}}{{- $emojiColor = "yellow+b" -}}
				{{- end -}}
			{{- tablerow .id .databaseId ($author | color $authorColor) (timeago .createdAt) ($emojiCount | color $emojiColor) .body -}}
		{{- end -}}\''

	PR_COMMENT_OUTPUT=$(FZF_DEFAULT_COMMAND="$GH_PR_COMMENTS_COMMAND --cache ${1:-$CACHE_TIME} --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$PR_NUMBER" \
		_fzf_basic_options --header-lines 6 --with-nth 3.. \
		--prompt $'\e[1;94m'"Pull Request 💬 [$OWNER_REPO_NAME] > " \
		--preview-window "+5:~5" --preview "$GH_COMMENTS_PREVIEW | $BAT_OR_CAT" \
		--bind "?:toggle-preview+change-preview:$HELP_PR_COMMENT_SECTION" \
		--bind "tab:toggle-preview+change-preview:$GH_COMMENTS_PREVIEW | $BAT_OR_CAT" \
		--bind "ctrl-b:execute-silent(open https://github.com/$OWNER_REPO_NAME/pull/$PR_NUMBER#issuecomment-{2})" \
		--bind "ctrl-d:toggle-preview+change-preview(gh pr diff $PR_NUMBER --repo $OWNER_REPO_NAME"$' | if type delta &>/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi)' \
		--bind "ctrl-t:execute-silent($GH_ADD_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:$GH_PR_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$PR_NUMBER || true" \
		--bind "ctrl-u:execute-silent($GH_REMOVE_REACTION --raw-field id={1} --raw-field emoji=$REACTION_EMOJI)+reload:$GH_PR_COMMENTS_COMMAND --raw-field owner=${OWNER_REPO_NAME%/*} --raw-field name=${OWNER_REPO_NAME#*/} --field number=$PR_NUMBER || true" \
		--expect "ctrl-x,esc")

	case $(sed 1q <<<"${PR_COMMENT_OUTPUT}") in
	ctrl-x)
		gh issue comment "$PR_NUMBER" --repo "$OWNER_REPO_NAME"
		_load_indicator "Restarting ..." 0.25
		_fzf_pr_comment 0s
		;;
	esc) _fzf_pr ;;
	esac
}

###################################### SEARCH

HELP_SEARCH_SECTION='cat <<<"
gh look search [-Flags] [Search term]

Flags  │ Description
───────│───────────────
<term> │ Search for GitHub repos
-c     │ Cache the response, for example "30s", "15m", "1h" (default: 5m)
-w     │ Display the preview window upon start (default: hidden)

Head │ Description
─────│───────────────
⭐   │ Number of stargazers
🏁   │ Primary language

HotKeys   │ Description
──────────│───────────────
?         │ Toggle help
tab       │ Preview README
shift+tab │ Switch to Issues
ctrl+b    │ Browser
ctrl+f    │ Preview release infos
ctrl+r    │ Reload
ctrl+t    │ Star repo
ctrl+u    │ Unstar repo
ctrl+x    │ Clone repo
esc       │ Exit"'

_fzf_search() {

	GH_SEARCH=$'gh api graphql --raw-field query=\'query($filter: String!) { search(query: $filter, type: REPOSITORY, first: 25) { repositoryCount nodes { ... on Repository {description isFork name owner {login} primaryLanguage {name} pushedAt stargazerCount viewerHasStarred}}}}\' --template=\'
		{{- $limitCount := .data.search.repositoryCount -}}
			{{- if gt .data.search.repositoryCount 25.0 -}}{{- $limitCount = 25.0 -}}{{- end -}}
		{{- tablerow (printf "%.0f of ∑ %.0f Repos" $limitCount .data.search.repositoryCount | color "yellow") ("|" | color "white") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "blue+b" -}}
			{{- tablerow ("REPO" | color $headerColor) "⭐" "🏁" ("LAST COMMIT" | color $headerColor) ("DESCRIPTION" | color $headerColor) -}}
		{{- range .data.search.nodes -}}
			{{- $stargazerCount := printf "%.0f" .stargazerCount -}}
				{{- if gt .stargazerCount 1000000.0 -}}{{- $stargazerCount = ">1M" -}}
					{{- else if gt .stargazerCount 100000.0 -}}{{- $stargazerCount = printf "%.3sk" $stargazerCount -}}
					{{- else if gt .stargazerCount 10000.0 -}}{{- $stargazerCount = printf "%.2sk" $stargazerCount -}}
					{{- else if gt .stargazerCount 1000.0 -}}{{- $stargazerCount = printf "%.1sk" $stargazerCount -}}
					{{- else if eq .stargazerCount 0.0 -}}{{- $stargazerCount = "" -}}
				{{- end -}}
			{{- $stargazerColor := "yellow" -}}
				{{- if .viewerHasStarred }}{{ $stargazerColor = "011+h:094" }}{{ end -}}
			{{- $langName := "" -}}
				{{- if .primaryLanguage }}{{ $langName = .primaryLanguage.name }}{{ end -}}
			{{- if eq $langName "JavaScript" }}{{- $langName = "" -}}
				{{- else if eq $langName "Python" }}{{- $langName = "" -}}
			{{ end -}}
			{{- tablerow (printf "%s%s%s" (.owner.login | color "cyan+h") ("/" | color "gray+h") (.name | color "cyan+hb")) ($stargazerCount | color $stargazerColor) ($langName | color "green") (timeago .pushedAt | color "gray+h") .description -}}
		{{- end -}}\''
	SEARCH_OUTPUT=$(FZF_DEFAULT_COMMAND="$GH_SEARCH --raw-field filter=$INITIAL_QUERY --cache $CACHE_TIME" \
		_fzf_basic_options \
		--disabled \
		--prompt "Search  repos > " \
		--header "" --header-lines 3 \
		--preview "gh repo view {1}" --preview-window wrap:"$PREVIEW_WINDOW_VISIBILITY" \
		--query "$INITIAL_QUERY" --exact \
		--bind "change:first+reload:$GH_SEARCH --raw-field filter={q} --cache $CACHE_TIME || true" \
		--bind "?:toggle-preview+change-preview:$HELP_SEARCH_SECTION" \
		--bind 'tab:toggle-preview+change-preview(gh repo view {1})' \
		--bind "ctrl-b:execute-silent(gh repo view {1} --web)" \
		--bind $'ctrl-f:toggle-preview+change-preview([[ $(gh release list -R {1}) ]] && gh release view -R {1})' \
		--bind "ctrl-r:reload:$GH_SEARCH --raw-field filter={q} || true" \
		--bind "ctrl-t:execute-silent(gh api -X PUT /user/starred/{1})+reload:$GH_SEARCH --raw-field filter={q} --cache 0s || true" \
		--bind "ctrl-u:execute-silent(gh api -X DELETE /user/starred/{1})+reload:$GH_SEARCH --raw-field filter={q} --cache 0s || true" \
		--expect "btab")

	OWNER_REPO_NAME=$(sed 1d <<<"${SEARCH_OUTPUT}" | awk '{print $1}')
	case $(sed 1q <<<"${SEARCH_OUTPUT}") in
	btab)
		INITIAL_QUERY=""
		_fzf_issue 0s
		;;
	esac
}

###################################### STARS

HELP_STAR_SECTION='cat <<<"
gh look star [-Flags] [Search term]

Flags  │ Description
───────│───────────────
<none> │ List your stars (sorted by the time the user set the star)
-c     │ Cache the response, for example "30s", "15m", "1h" (default: 20s)
-U     │ List stars of another user
-w     │ Display the preview window upon start (default: hidden)

Head │ Description
─────│───────────────
⭐   │ Number of stargazers
🏁   │ Primary language

HotKeys  │ Description
─────────│───────────────
?        │ Toggle help
tab      │ Preview README
ctrl+b   │ Browser
ctrl+r   │ Reload
ctrl+f   │ Preview release infos
ctrl+t   │ Star repo (useful for stars of another user)
ctrl+u   │ Unstar repo
esc      │ Exit"'

_fzf_star() {
	FZF_DEFAULT_COMMAND=$'gh api graphql --paginate --raw-field query=\'query($endCursor: String, $USER_NAME:String! ) { user(login:$USER_NAME) { starredRepositories(orderBy: { field: STARRED_AT direction: DESC }, first: 100, after: $endCursor) { totalCount pageInfo { hasNextPage, endCursor } nodes { name owner {login} primaryLanguage {name} stargazerCount viewerHasStarred pushedAt description }}}}\' --template \'
		{{- tablerow (printf "∑ %.0f Starred Repos" .data.user.starredRepositories.totalCount | color "yellow+h") ( "|" | color "white") ("? - Toggle Help" | color "blue+d") -}}{{- tablerender -}}
		{{- tablerow "" -}}{{- tablerender -}}
		{{- $headerColor := "yellow+b" -}}
			{{- tablerow ("REPO" | color $headerColor) "⭐" "🏁" ("LAST COMMIT" | color $headerColor) ("DESCRIPTION" | color $headerColor) -}}
		{{- range .data.user.starredRepositories.nodes -}}
		{{- $stargazerCount := printf "%.0f" .stargazerCount -}}
			{{- if gt .stargazerCount 1000000.0 -}}{{- $stargazerCount = ">1M" -}}
				{{- else if gt .stargazerCount 100000.0 -}}{{- $stargazerCount = printf "%.3sk" $stargazerCount -}}
				{{- else if gt .stargazerCount 10000.0 -}}{{- $stargazerCount = printf "%.2sk" $stargazerCount -}}
				{{- else if gt .stargazerCount 1000.0 -}}{{- $stargazerCount = printf "%.1sk" $stargazerCount -}}
				{{- else if eq .stargazerCount 0.0 -}}{{- $stargazerCount = "" -}}
			{{- end -}}
		{{- $stargazerColor := "yellow" -}}
			{{- if .viewerHasStarred }}{{ $stargazerColor = "011+h:094" }}{{ end -}}
		{{- $langName := "" -}}
			{{- if .primaryLanguage }}{{ $langName = .primaryLanguage.name }}{{ end -}}
			{{- if eq $langName "JavaScript" }}{{- $langName = "" -}}
				{{- else if eq $langName "Python" }}{{- $langName = "" -}}
			{{ end -}}
		{{- $time := "" -}}{{- /* NOTE: Possible a repo has no commits, have an conditional around the timeago function to be safe against nil condition. */ -}}
			{{- if .pushedAt -}}{{- $time = (timeago .pushedAt) -}}{{- end -}}
		{{- tablerow (printf "%s%s%s" (.owner.login | color "cyan+h") ("/" | color "gray+h") (.name | color "cyan+hb")) ($stargazerCount | color $stargazerColor) ($langName | color "green") ($time | color "gray+h") .description -}}
		{{- end -}}\''" --raw-field USER_NAME=$USER_NAME --cache $CACHE_TIME" \
		_fzf_basic_options --nth 1,3,7.. \
		--prompt $'\e[1;93mSearch  stars'" [$USER_NAME] > " --header "" --header-lines 3 \
		--preview "gh repo view {1}" --preview-window wrap:"$PREVIEW_WINDOW_VISIBILITY" \
		--query "$INITIAL_QUERY" --exact \
		--bind "?:toggle-preview+change-preview:$HELP_STAR_SECTION" \
		--bind 'tab:toggle-preview+change-preview(gh repo view {1})' \
		--bind "ctrl-b:execute-silent(gh repo view {1} --web)" \
		--bind $'ctrl-f:toggle-preview+change-preview([[ $(gh release list -R {1}) ]] && gh release view -R {1})' \
		--bind $'ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND" --cache 0s)' \
		--bind $'ctrl-t:execute-silent(gh api --method PUT user/starred/{1})+reload(eval "$FZF_DEFAULT_COMMAND" --cache 0s)' \
		--bind $'ctrl-u:execute-silent(gh api --method DELETE user/starred/{1})+reload(eval "$FZF_DEFAULT_COMMAND" --cache 0s)'
}

# TODO the statement [[...]] && ... || ... is a typical bash pitfall case, if the command after && fails the command after || gets executed as well (it should not); use a simple if ... else ... statement
# https://mywiki.wooledge.org/BashPitfalls#cmd1_.26.26_cmd2_.7C.7C_cmd3
# TODO remove all my emojis from the issue when the hotkey is called.
# TODO it would be useful to store an emoji in the scratch file, but it must be visually clear which emoji is actively set when generating a reaction
# TODO on return from the comment section it falls back to the original, rather than the last
# TODO the I only want the merge event and hide the close event on PR's https://pkg.go.dev/text/template

REACTION_EMOJI="THUMBS_UP"
SORTING_ORDER=""
OWNER_REPO_NAME=""
USER_NAME=""
PREVIEW_WINDOW_VISIBILITY="hidden"
ISSUE_OUTPUT=""
ISSUE_COMMENT_OUTPUT=""
PR_OUTPUT=""
PR_COMMENT_OUTPUT=""
BAT_OR_CAT="cat"
# for better speed
CACHE_TIME="20s"

GH_ADD_REACTION=$'gh api graphql --silent --raw-field query=\'mutation($id: ID! $emoji: ReactionContent! ) { addReaction(input: {subjectId: $id content: $emoji }) { clientMutationId }}\''
GH_REMOVE_REACTION=$'gh api graphql --silent --raw-field query=\'mutation($id: ID! $emoji: ReactionContent! ) { removeReaction(input: {subjectId: $id content: $emoji }) { clientMutationId }}\''

# Get the name and date of the commenter, convert the emojis to real emojis, add the total number next to it. Highlight if the viewer has used it.
# Get the last 4 emoji reactor names for each group,
# based on the length of the array of reactor names, either print or slice 1 and add a ", ..." as an indicator of more than three
# End the list with the commenter's actual message.
GH_COMMENTS_PREVIEW=$'gh api graphql --raw-field id={1} --raw-field query=\'query($id: ID! ){node(id: $id) {... on Comment { author{login} body createdAt viewerDidAuthor} ... on Reactable { reactionGroups { content viewerHasReacted reactors(last: 4) { nodes {... on User { login }} totalCount }}}}}\' --template \'{{- $prefix := .data.node -}}{{- $author := "[DELETED_USER]" -}}{{- if $prefix.author -}}{{- $author = $prefix.author.login -}}{{- end -}}{{- $authorColor := "cyan+hb" -}}{{- if $prefix.viewerDidAuthor -}}{{- $authorColor = "yellow+bh" -}}{{- end -}}{{- tablerow  ("◥■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■◤"| color "gray+d") -}}{{- tablerender -}}{{- tablerow ($author | color $authorColor) (timeago $prefix.createdAt | color "white+bh") -}}{{- tablerender -}}{{- range $prefix.reactionGroups -}}{{ $emoji := .content }}{{ if eq .content "CONFUSED" }}{{ $emoji = "😕" }}{{ else if eq .content "EYES" }}{{ $emoji = "👀" }}{{ else if eq .content "HEART" }}{{ $emoji = "💖" }}{{ else if eq .content "HOORAY" }}{{ $emoji = "🎉" }}{{ else if eq .content "LAUGH" }}{{ $emoji = "😄" }}{{ else if eq .content "THUMBS_DOWN" }}{{ $emoji = "👎" }}{{ else if eq .content "THUMBS_UP" }}{{ $emoji = "👍" }}{{ else if eq .content "ROCKET" }}{{ $emoji = "🚀" }}{{ end }}{{ if gt .reactors.totalCount 0.0 }}{{ $emojiGiver := pluck "login" .reactors.nodes | join ", " | color "green+d" }}{{ if gt (pluck "login" .reactors.nodes | len ) 3 }}{{- /* NOTE: number of names limited */ -}}{{ $emojiGiver = slice (pluck "login" .reactors.nodes) 1 | join ", " | printf "%s, ..." | color "green+d" }}{{end}}{{- $emojiTotal := .reactors.totalCount | color "green+bd" -}}{{- if .viewerHasReacted -}}{{- $emojiTotal = .reactors.totalCount | color "yellow+bh" -}}{{- end -}}{{- tablerow (printf "%s %s" $emojiTotal $emoji) $emojiGiver -}}{{- tablerender -}}{{- end -}}{{- end }}{{- tablerow  ("‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥‥"| color "gray+d") -}}{{- tablerender -}}{{- tablerow "" -}}{{- tablerender -}}{{- $prefix.body -}}\''

if [ $# = 0 ]; then
	bash -c "$HELP_GENERAL"
	exit 1
else
	############# Check needed programs installed #############
	if ! command -v fzf >/dev/null; then
		echo "Missing: fzf"
		exit 1
	fi
	if command -v bat >/dev/null; then
		BAT_OR_CAT="bat --color always --language md --style plain"
	fi

	############# Check needed scratch file exits and writeable #############
	# The purpose of this file is to signal to the fzf which search mode is active and remember the last one.
	# This allows switching between "Open" and "All issues/ prs" and active search within the selected category.
	SCRATCH_FILE="${BASH_SOURCE%/*}/.trashme"
	if [ ! -e "$SCRATCH_FILE" ]; then
		touch "$SCRATCH_FILE" 2>/dev/null || echo "Not allowed creating $SCRATCH_FILE"
	fi
	if [ ! -w "$SCRATCH_FILE" ]; then
		echo Not allowed writing to "$SCRATCH_FILE"
		exit 1
	fi
fi

while [ $# -gt 0 ]; do
	COMMAND_ARG="$1"
	case "$COMMAND_ARG" in
	issue | pr)
		shift
		while getopts :c:e:o:R:w flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					gh api octocat
					echo "Search help, invalid cache time: $OPTARG !!!"
					exit 1
				fi
				;;
			e)
				if [[ "CONFUSED EYES HEART HOORAY LAUGH THUMBS_DOWN THUMBS_UP ROCKET" =~ $OPTARG ]]; then
					REACTION_EMOJI="$OPTARG"
				else
					gh api octocat
					echo "!!! Search help, invalid emoji: $OPTARG"
					exit 1
				fi
				;;
			o)
				if [[ "$OPTARG" =~ ^[A-Za-z-]{7,}$ ]]; then
					SORTING_ORDER="sort:$OPTARG"
				else
					gh api octocat
					echo "Search help, invalid sort order: $OPTARG !!!"
					exit 1
				fi
				;;
			R)
				# local syntax test first to fail fast, and then gh api test
				# curl is faster, but unauthenticated API requests to GitHub are capped at 60 per hour. Authenticated API requests 5000 per hour.
				if [[ "$OPTARG" =~ ^[^:/]+/[^:/]+$ ]]; then
					OWNER_REPO_NAME="$OPTARG"
				else
					gh api octocat
					echo "!!! Respect the syntax: gh look {issue,pr} -R OWNER/REPO"
					exit 1
				fi
				if ! gh api --silent repos/"$OWNER_REPO_NAME" 2>/dev/null; then
					gh api octocat
					echo "No GitHub repo called $OWNER_REPO_NAME !!!"
					exit 1
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				grep -q "issue" <<<"$COMMAND_ARG" && bash -c "$HELP_ISSUE_SECTION"
				grep -q "pr" <<<"$COMMAND_ARG" && bash -c "$HELP_PR_SECTION"
				exit 0
				;;
			esac
		done
		# shift all processed options away, all that's left "$*" are non-options (aka mass-arguments/operands)
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		if [ -z "$OWNER_REPO_NAME" ]; then
			# if the OWNER_REPO_NAME is not set yet, check if the repo has a remote and assign the variable
			git ls-remote --get-url 2>/dev/null 1>&2 || exit 1
			# local alternative, but requires Perl-compatible regular expressions (PCREs)
			# git remote -v | grep -m 1 -oP '(?<=\:).+(?=\.)'
			OWNER_REPO_NAME="$(gh api graphql --cache 1h --field owner=:owner --field name=:repo --raw-field query=$'query ($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { nameWithOwner }}' --jq '.[].repository.nameWithOwner')"
		fi

		grep -q "issue" <<<"$COMMAND_ARG" && _fzf_issue
		grep -q "pr" <<<"$COMMAND_ARG" && _fzf_pr
		;;
	search)
		shift
		while getopts :c:w flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					gh api octocat
					echo "Search help, invalid cache time: $OPTARG !!!"
					exit 1
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				bash -c "$HELP_SEARCH_SECTION"
				exit 1
				;;
			esac
		done
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		_fzf_search
		;;
	star)
		shift
		while getopts :c:U:w flag; do
			case "$flag" in
			c)
				if [[ "$OPTARG" =~ ^[0-9]+[smh]$ ]]; then
					CACHE_TIME="$OPTARG"
				else
					gh api octocat
					echo "Search help, invalid cache time: $OPTARG !!!"
					exit 1
				fi
				;;
			U)
				# local syntax test first to fail fast, and then gh api test
				if [[ "$OPTARG" =~ ^[^:/]+$ ]]; then
					USER_NAME="$OPTARG"
				else
					echo "!!! Respect the syntax: gh look star -U USER"
					exit 1
				fi
				# gh api --silent users/... would be shorter, but would result in a false positive for organizations
				if ! gh api graphql --silent --raw-field USER_NAME="$USER_NAME" --raw-field query=$'query ($USER_NAME: String!) { user(login: $USER_NAME) { login }}' 2>/dev/null; then
					gh api octocat
					echo "No USER called $USER_NAME !!!"
					exit 1
				fi
				;;
			w) PREVIEW_WINDOW_VISIBILITY="nohidden" ;;
			*)
				bash -c "$HELP_STAR_SECTION"
				exit 1
				;;
			esac
		done
		shift "$((OPTIND - 1))"
		INITIAL_QUERY="$*"
		# if the USER_NAME is not set yet, use your own.
		if [ -z "$USER_NAME" ]; then
			USER_NAME="$(gh api graphql --cache 1h --raw-field query='{viewer{login}}' --jq '.data.viewer.login')"
		fi
		_fzf_star
		;;
	*)
		bash -c "$HELP_GENERAL"
		exit 1
		;;

	esac
done
